// Copyright (c) 2025 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=2aa40bb43896587c2ec7f857a8cf010c6b323be0$
//

#include "libcef_dll/ctocpp/v8array_buffer_release_callback_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void CefV8ArrayBufferReleaseCallbackCToCpp::ReleaseBuffer(void* buffer) {
  cef_v8array_buffer_release_callback_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, release_buffer)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: buffer; type: simple_byaddr
  DCHECK(buffer);
  if (!buffer) {
    return;
  }

  // Execute
  _struct->release_buffer(_struct, buffer);
}

// CONSTRUCTOR - Do not edit by hand.

CefV8ArrayBufferReleaseCallbackCToCpp::CefV8ArrayBufferReleaseCallbackCToCpp() {
}

// DESTRUCTOR - Do not edit by hand.

CefV8ArrayBufferReleaseCallbackCToCpp::
    ~CefV8ArrayBufferReleaseCallbackCToCpp() {}

template <>
cef_v8array_buffer_release_callback_t*
CefCToCppRefCounted<CefV8ArrayBufferReleaseCallbackCToCpp,
                    CefV8ArrayBufferReleaseCallback,
                    cef_v8array_buffer_release_callback_t>::
    UnwrapDerived(CefWrapperType type, CefV8ArrayBufferReleaseCallback* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
CefWrapperType
    CefCToCppRefCounted<CefV8ArrayBufferReleaseCallbackCToCpp,
                        CefV8ArrayBufferReleaseCallback,
                        cef_v8array_buffer_release_callback_t>::kWrapperType =
        WT_V8ARRAY_BUFFER_RELEASE_CALLBACK;
