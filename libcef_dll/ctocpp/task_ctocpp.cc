// Copyright (c) 2025 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4659f8844e499cb9f7399c5fac411785f2f22a2c$
//

#include "libcef_dll/ctocpp/task_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") void CefTaskCToCpp::Execute() {
  cef_task_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, execute)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->execute(_struct);
}

// CONSTRUCTOR - Do not edit by hand.

CefTaskCToCpp::CefTaskCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

CefTaskCToCpp::~CefTaskCToCpp() {}

template <>
cef_task_t*
CefCToCppRefCounted<CefTaskCToCpp, CefTask, cef_task_t>::UnwrapDerived(
    CefWrapperType type,
    CefTask* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
CefWrapperType
    CefCToCppRefCounted<CefTaskCToCpp, CefTask, cef_task_t>::kWrapperType =
        WT_TASK;
