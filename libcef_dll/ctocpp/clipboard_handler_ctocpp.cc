// Copyright (c) 2021 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8668e72be1d8c4e8b292f1b8211c0bcee3e34dd6$
//

#include "libcef_dll/ctocpp/clipboard_handler_ctocpp.h"
#include "libcef_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void CefClipboardHandlerCToCpp::OnClipboardChanged(const char* data,
                                                   size_t size) {
  shutdown_checker::AssertNotShutdown();

  cef_clipboard_handler_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, on_clipboard_changed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: data; type: simple_byaddr
  DCHECK(data);
  if (!data)
    return;

  // Execute
  _struct->on_clipboard_changed(_struct, data, size);
}

// CONSTRUCTOR - Do not edit by hand.

CefClipboardHandlerCToCpp::CefClipboardHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

CefClipboardHandlerCToCpp::~CefClipboardHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
cef_clipboard_handler_t* CefCToCppRefCounted<
    CefClipboardHandlerCToCpp,
    CefClipboardHandler,
    cef_clipboard_handler_t>::UnwrapDerived(CefWrapperType type,
                                            CefClipboardHandler* c) {
  NOTREACHED() << "Unexpected class type: " << type;
  return nullptr;
}

template <>
CefWrapperType CefCToCppRefCounted<CefClipboardHandlerCToCpp,
                                   CefClipboardHandler,
                                   cef_clipboard_handler_t>::kWrapperType =
    WT_CLIPBOARD_HANDLER;
