diff --git base/message_loop/message_pump_win.cc base/message_loop/message_pump_win.cc
index 1a263dc22f472bc12c95f819066b3b4bf0b3eab7..09fa613e35649f85aec1f2b6a5479c4f4639eaab 100644
--- base/message_loop/message_pump_win.cc
+++ base/message_loop/message_pump_win.cc
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "base/task/current_thread.h"
 #include "base/message_loop/message_pump_win.h"
 
 #include <windows.h>
@@ -585,7 +586,17 @@ bool MessagePumpForUI::ProcessNextWindowsMessage() {
                 ctx.event()->set_chrome_message_pump();
             msg_pump_data->set_sent_messages_in_queue(more_work_is_plausible);
           });
-      has_msg = ::PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE) != FALSE;
+
+      // We should not process all window messages if we are in the context of an
+      // OS modal loop, i.e. in the context of a windows API call like MessageBox.
+      // This is to ensure that these messages are peeked out by the OS modal loop.
+      if (CurrentThread::Get()->os_modal_loop()) {
+        // We only peek out WM_PAINT and WM_TIMER here for reasons mentioned above.
+        has_msg = PeekMessage(&msg, NULL, WM_PAINT, WM_PAINT, PM_REMOVE) ||
+                  PeekMessage(&msg, NULL, WM_TIMER, WM_TIMER, PM_REMOVE);
+      } else {
+        has_msg = PeekMessage(&msg, NULL, 0, 0, PM_REMOVE) != FALSE;
+      }
     }
   }
   if (has_msg) {
diff --git base/task/current_thread.cc base/task/current_thread.cc
index 53a6213a76b92da1f859ac0b90c42756fbf6b785..2177265e9b1b23cae610628945312998bcad92a7 100644
--- base/task/current_thread.cc
+++ base/task/current_thread.cc
@@ -51,6 +51,8 @@ void CurrentThread::AddDestructionObserver(
 
 void CurrentThread::RemoveDestructionObserver(
     DestructionObserver* destruction_observer) {
+  if (!current_)
+    return;
   DCHECK(current_->IsBoundToCurrentThread());
   current_->RemoveDestructionObserver(destruction_observer);
 }
diff --git base/task/current_thread.h base/task/current_thread.h
index b6e265e2d7628cdd3e671fbf7b6d4096863ab4d5..d072fae0fd58846f62c4fbd49e61739efd12c7b7 100644
--- base/task/current_thread.h
+++ base/task/current_thread.h
@@ -165,6 +165,12 @@ class BASE_EXPORT CurrentThread {
       RegisterOnNextIdleCallbackPasskey,
       OnceClosure on_next_idle_callback);
 
+#if BUILDFLAG(IS_WIN)
+  void set_os_modal_loop(bool os_modal_loop) { os_modal_loop_ = os_modal_loop; }
+
+  bool os_modal_loop() const { return os_modal_loop_; }
+#endif  // OS_WIN
+
   // Enables nested task processing in scope of an upcoming native message loop.
   // Some unwanted message loops may occur when using common controls or printer
   // functions. Hence, nested task processing is disabled by default to avoid
@@ -236,6 +242,13 @@ class BASE_EXPORT CurrentThread {
   friend class web::WebTaskEnvironment;
 
   raw_ptr<sequence_manager::internal::SequenceManagerImpl> current_;
+
+#if BUILDFLAG(IS_WIN)
+ private:
+  // Should be set to true before calling Windows APIs like TrackPopupMenu, etc.
+  // which enter a modal message loop.
+  bool os_modal_loop_ = false;
+#endif
 };
 
 #if !BUILDFLAG(IS_NACL)
