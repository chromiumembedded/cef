diff --git linux_syscall_support.h linux_syscall_support.h
index 8d4e4d2..3c5c0c1 100644
--- linux_syscall_support.h
+++ linux_syscall_support.h
@@ -88,8 +88,8 @@
  */
 #if (defined(__i386__) || defined(__x86_64__) || defined(__ARM_ARCH_3__) ||   \
      defined(__mips__) || defined(__PPC__) || defined(__ARM_EABI__) || \
-     defined(__aarch64__) || defined(__s390__)) || defined(__e2k__)  \
-  && (defined(__linux) || defined(__ANDROID__))
+     defined(__aarch64__) || defined(__s390__) || defined(__e2k__) || \
+     defined(__loongarch64)) && (defined(__linux) || defined(__ANDROID__))
 
 #ifndef SYS_CPLUSPLUS
 #ifdef __cplusplus
@@ -115,10 +115,11 @@ extern "C" {
 #include <sys/syscall.h>
 #include <unistd.h>
 #include <linux/unistd.h>
+#include <linux/stat.h>
 #include <endian.h>
 
 #ifdef __mips__
-/* Include definitions of the ABI currently in use.                          */
+/* Include definitions of the ABI currently in use.				*/
 #ifdef __ANDROID__
 /* Android doesn't have sgidefs.h, but does have asm/sgidefs.h,
  * which has the definitions we need.
@@ -286,6 +287,15 @@ struct kernel_rusage {
   long               ru_nivcsw;
 };
 
+#if defined(__loongarch64)
+/* include/linux/stat.h								*/
+struct kernel_timestamp {
+  long		tv_sec;
+  unsigned int 	tv_nsec;
+  signed int	reserved;
+};
+#endif
+
 #if defined(__i386__) || defined(__ARM_EABI__) || defined(__ARM_ARCH_3__) \
   || defined(__PPC__) || (defined(__s390__) && !defined(__s390x__)) \
   || defined(__e2k__)
@@ -302,7 +312,7 @@ struct kernel_old_sigaction {
 } __attribute__((packed,aligned(4)));
 #elif (defined(__mips__) && _MIPS_SIM == _MIPS_SIM_ABI32)
   #define kernel_old_sigaction kernel_sigaction
-#elif defined(__aarch64__)
+#elif defined(__aarch64__) || defined(__loongarch64)
   // No kernel_old_sigaction defined for arm64.
 #endif
 
@@ -342,7 +352,9 @@ struct kernel_sigaction {
     void             (*sa_sigaction_)(int, siginfo_t *, void *);
   };
   unsigned long      sa_flags;
+#ifndef __loongarch64
   void               (*sa_restorer)(void);
+#endif
   struct kernel_sigset_t sa_mask;
 #endif
 };
@@ -727,6 +739,21 @@ struct kernel_statfs {
   unsigned int       f_flags;
   unsigned int       f_spare[4];
 };
+#elif defined(__loongarch64)
+struct kernel_statfs {
+  unsigned long      f_type;
+  unsigned long      f_bsize;
+  unsigned long      f_blocks;
+  unsigned long      f_bfree;
+  unsigned long      f_bavail;
+  unsigned long      f_files;
+  unsigned long      f_ffree;
+  struct { int val[2]; } f_fsid;
+  unsigned long      f_namelen;
+  unsigned long      f_frsize;
+  unsigned long      f_flags;
+  unsigned long      f_sparep[4];
+};
 #else
 struct kernel_statfs {
   unsigned long      f_type;
@@ -743,6 +770,33 @@ struct kernel_statfs {
 };
 #endif
 
+#if defined(__loongarch64)
+struct kernel_stat {
+ unsigned int	st_mask;
+ unsigned int	st_blksize;
+ unsigned long	st_attributes;
+ unsigned int	st_nlink;
+ unsigned int	st_uid;
+ unsigned int	st_gid;
+ unsigned char	st_mode;
+ unsigned char	__spare0[1];
+ unsigned long	st_ino;
+ unsigned long	st_size;
+ unsigned long	st_blocks;
+ unsigned long	st_attributes_mask;
+ struct kernel_timestamp  st_atime_;
+ struct kernel_timestamp  st_btime_;
+ struct kernel_timestamp  st_ctime_;
+ struct kernel_timestamp  st_mtime_;
+ unsigned int	st_rdev_major;
+ unsigned int	st_rdev_minor;
+ unsigned int	st_dev_major;
+ unsigned int	st_dev_minor;
+ unsigned long	st_mnt_id;
+ unsigned long	__spare2;
+ unsigned long	__spare3[12];
+};
+#endif
 
 /* Definitions missing from the standard header files                        */
 #ifndef O_DIRECTORY
@@ -1110,7 +1164,7 @@ struct kernel_statfs {
 #define __NR_getrandom          (__NR_SYSCALL_BASE + 384)
 #endif
 /* End of ARM 3/EABI definitions                                             */
-#elif defined(__aarch64__)
+#elif defined(__aarch64__) || defined(__loongarch64)
 #ifndef __NR_setxattr
 #define __NR_setxattr             5
 #endif
@@ -1209,7 +1263,7 @@ struct kernel_statfs {
 #ifndef __NR_getrandom
 #define __NR_getrandom          278
 #endif
-/* End of aarch64 definitions                                                */
+/* End of aarch64 definitions and loongarch64                             */ 
 #elif defined(__x86_64__)
 #ifndef __NR_pread64
 #define __NR_pread64             17
@@ -1925,8 +1979,8 @@ struct kernel_statfs {
 
   #undef  LSS_RETURN
   #if (defined(__i386__) || defined(__x86_64__) || defined(__ARM_ARCH_3__) \
-       || defined(__ARM_EABI__) || defined(__aarch64__) || defined(__s390__)) \
-       || defined(__e2k__)
+       || defined(__ARM_EABI__) || defined(__aarch64__) || defined(__s390__) \
+       || defined(__e2k__) || defined(__loongarch64))
   /* Failing system calls return a negative result in the range of
    * -1..-4095. These are "errno" values with the sign inverted.
    */
@@ -2879,6 +2933,121 @@ struct kernel_statfs {
       }
       LSS_RETURN(int, __res);
     }
+  #elif defined(__loongarch64)
+    #undef LSS_REG
+    #define LSS_REG(r,a) register int64_t __r##r __asm__("$a"#r) = (int64_t)a
+    #undef  LSS_BODY
+    #define LSS_BODY(type,name,args...)                                       \
+          register int64_t __res_a0 __asm__("$a0");                           \
+          register int64_t __a7 __asm__("$a7") = __NR_##name;                 \
+          int64_t __res;                                                      \
+          __asm__ __volatile__ ("syscall 0\n"                                 \
+                                : "=r"(__res_a0)                              \
+                                : "r"(__a7) , ## args                         \
+                                : "memory");                                  \
+          __res = __res_a0;                                                   \
+          LSS_RETURN(type, __res)
+    #undef _syscall0
+    #define _syscall0(type, name)                                             \
+      type LSS_NAME(name)(void) {                                             \
+        LSS_BODY(type, name);                                                 \
+      }
+    #undef _syscall1
+    #define _syscall1(type, name, type1, arg1)                                \
+      type LSS_NAME(name)(type1 arg1) {                                       \
+        LSS_REG(0, arg1); LSS_BODY(type, name, "r"(__r0));                    \
+      }
+    #undef _syscall2
+    #define _syscall2(type, name, type1, arg1, type2, arg2)                   \
+      type LSS_NAME(name)(type1 arg1, type2 arg2) {                           \
+        LSS_REG(0, arg1); LSS_REG(1, arg2);                                   \
+        LSS_BODY(type, name, "r"(__r0), "r"(__r1));                           \
+      }
+    #undef _syscall3
+    #define _syscall3(type, name, type1, arg1, type2, arg2, type3, arg3)      \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {               \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2));                \
+      }
+    #undef _syscall4
+    #define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)  \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_REG(3, arg4);                                                     \
+        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3));     \
+      }
+    #undef _syscall5
+    #define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,  \
+                      type5,arg5)                                             \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
+                          type5 arg5) {                                       \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_REG(3, arg4); LSS_REG(4, arg5);                                   \
+        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
+                             "r"(__r4));                                      \
+      }
+    #undef _syscall6
+    #define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,  \
+                      type5,arg5,type6,arg6)                                  \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
+                          type5 arg5, type6 arg6) {                           \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_REG(3, arg4); LSS_REG(4, arg5); LSS_REG(5, arg6);                 \
+        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
+                             "r"(__r4), "r"(__r5));                           \
+      }
+
+    LSS_INLINE int LSS_NAME(clone)(int (*fn)(void *), void *child_stack,
+                                   int flags, void *arg, int *parent_tidptr,
+                                   void *newtls, int *child_tidptr) {
+      int64_t __res;
+      {
+        register uint64_t __flags __asm__("$a0") = flags;
+        register void *__stack __asm__("$a1") = child_stack;
+        register void *__ptid  __asm__("$a2") = parent_tidptr;
+        register void *__tls   __asm__("$a3") = newtls;
+        register int  *__ctid  __asm__("$a4") = child_tidptr;
+        __asm__ __volatile__(/* Push "arg" and "fn" onto the stack that will be
+                              * used by the child.
+                              */
+                             "addi.d  %2,%2, -16\n"
+                             "st.d    %1,%2, 8\n"
+                             "st.d    %4,%2, 0\n"
+
+                             /* %a0 = syscall(%a0 = flags,
+                              *               %a1 = child_stack,
+                              *               %a2 = parent_tidptr,
+                              *               %a3 = newtls,
+                              *               %a4 = child_tidptr)
+                              */
+                             "li.w    $a7, %8\n"
+                             "syscall 0\n"
+
+                             /* if (%a0 != 0)
+                              *   return %a0;
+                              */
+			     "move    %0, $a0\n"
+                             "bnez    $a0, 1f\n"
+
+                             /* In the child, now. Call "fn(arg)".
+                              */
+                             "ld.d    $a0, $sp, 0\n"
+                             "ld.d    $a1, $sp, 8\n"
+                             "jirl    $ra, $a1, 0\n"
+
+                             /* Call _exit(%a0).
+                              */
+                             "li.w     $a7, %9\n"
+                             "syscall  0\n"
+                           "1:\n"
+                             : "=r" (__res)
+                             : "r"(fn), "r"(__stack), "r"(__flags), "r"(arg),
+                               "r"(__ptid), "r"(__tls), "r"(__ctid),
+                               "i"(__NR_clone), "i"(__NR_exit)
+                             : "cc", "memory");
+      }
+      LSS_RETURN(int, __res);
+    }
   #elif defined(__mips__)
     #undef LSS_REG
     #define LSS_REG(r,a) register unsigned long __r##r __asm__("$"#r) =       \
@@ -3702,8 +3871,10 @@ struct kernel_statfs {
     // fork is polyfilled below when not available.
     LSS_INLINE _syscall0(pid_t,   fork)
   #endif
+#if !defined(__loongarch64)
   LSS_INLINE _syscall2(int,     fstat,           int,         f,
                       struct kernel_stat*,   b)
+#endif
   LSS_INLINE _syscall2(int,     fstatfs,         int,         f,
                       struct kernel_statfs*, b)
   #if defined(__x86_64__)
@@ -3736,7 +3907,7 @@ struct kernel_statfs {
                        gid_t *,         e,       gid_t *,     s)
   LSS_INLINE _syscall3(int,     getresuid,       uid_t *,     r,
                        uid_t *,         e,       uid_t *,     s)
-#if !defined(__ARM_EABI__)
+#if !defined(__ARM_EABI__) && !defined(__loongarch64)
   LSS_INLINE _syscall2(int,     getrlimit,       int,         r,
                       struct kernel_rlimit*, l)
 #endif
@@ -3854,8 +4025,10 @@ struct kernel_statfs {
                        gid_t,          e, gid_t,  s)
   LSS_INLINE _syscall3(int,     setresuid,       uid_t,       r,
                        uid_t,          e, uid_t,  s)
+#if !defined(__loongarch64)
   LSS_INLINE _syscall2(int,     setrlimit,       int,         r,
                        const struct kernel_rlimit*, l)
+#endif
   LSS_INLINE _syscall0(pid_t,    setsid)
   LSS_INLINE _syscall2(int,     sigaltstack,     const stack_t*, s,
                        const stack_t*, o)
@@ -4484,7 +4657,7 @@ struct kernel_statfs {
       LSS_SC_BODY(4, int, 8, d, type, protocol, sv);
     }
   #endif
-  #if defined(__ARM_EABI__) || defined (__aarch64__)
+  #if defined(__ARM_EABI__) || defined (__aarch64__) || defined(__loongarch64)
     LSS_INLINE _syscall3(ssize_t, recvmsg, int, s, struct kernel_msghdr*, msg,
                          int, flags)
     LSS_INLINE _syscall3(ssize_t, sendmsg, int, s, const struct kernel_msghdr*,
@@ -4497,6 +4670,9 @@ struct kernel_statfs {
     LSS_INLINE _syscall4(int, socketpair, int, d, int, type, int, protocol,
                          int*, sv)
   #endif
+  #if defined(__loongarch64)
+    LSS_INLINE _syscall5(int, statx, int, dfd, const char*, pathname, int, flags, unsigned int, mask, struct kernel_stat*, statxbuf)
+  #endif
   #if defined(__i386__) || defined(__ARM_ARCH_3__) ||                         \
       (defined(__mips__) && _MIPS_SIM == _MIPS_SIM_ABI32) ||                  \
       defined(__s390__)
@@ -4812,7 +4988,7 @@ struct kernel_statfs {
 // TODO: define this in an arch-independant way instead of inlining the clone
 //       syscall body.
 
-# if defined(__aarch64__)
+# if defined(__aarch64__) || defined(__loongarch64)
   LSS_INLINE pid_t LSS_NAME(fork)(void) {
     // No fork syscall on aarch64 - implement by means of the clone syscall.
     // Note that this does not reset glibc's cached view of the PID/TID, so
