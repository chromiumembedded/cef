diff --git content/browser/child_process_security_policy_impl.cc content/browser/child_process_security_policy_impl.cc
index e6cf72b49b0ca6b8c7bcc58f5d925f2dee5797da..103bb39f6b71a9163e35ac7b120c7f4779515deb 100644
--- content/browser/child_process_security_policy_impl.cc
+++ content/browser/child_process_security_policy_impl.cc
@@ -2220,6 +2220,16 @@ bool ChildProcessSecurityPolicyImpl::PerformJailAndCitadelChecks(
         if (actual_process_lock.matches_scheme(url::kDataScheme)) {
           return true;
         }
+
+        // Allow other schemes that are non-standard, non-local and WebSafe.
+        if (lock_url.is_valid() && !lock_url.IsStandard() &&
+            !base::Contains(url::GetLocalSchemes(), lock_url.scheme_piece())) {
+          base::AutoLock schemes_lock(schemes_lock_);
+          if (base::Contains(schemes_okay_to_request_in_any_process_,
+                             lock_url.scheme())) {
+            return true;
+          }
+        }
       }
 
       // Make an exception to allow most visited tiles to commit in third-party
diff --git content/browser/renderer_host/navigation_request.cc content/browser/renderer_host/navigation_request.cc
index 4288bf261741e4260b7a3117618fa19d39b20d2c..2b10e820bcd8fd8ace5f9cc4531d9ecc57b6ab5e 100644
--- content/browser/renderer_host/navigation_request.cc
+++ content/browser/renderer_host/navigation_request.cc
@@ -8743,7 +8743,8 @@ std::optional<url::Origin> NavigationRequest::GetOriginToCommit() {
 }
 
 url::Origin NavigationRequest::GetOriginForURLLoaderFactoryBeforeResponse(
-    network::mojom::WebSandboxFlags sandbox_flags) {
+    network::mojom::WebSandboxFlags sandbox_flags,
+    bool* cef_nonstandard) {
   // Calculate an approximation of the origin. The sandbox/csp are ignored.
   url::Origin origin = GetOriginForURLLoaderFactoryUnchecked();
 
@@ -8760,6 +8761,17 @@ url::Origin NavigationRequest::GetOriginForURLLoaderFactoryBeforeResponse(
   bool use_opaque_origin =
       (sandbox_flags & network::mojom::WebSandboxFlags::kOrigin) ==
       network::mojom::WebSandboxFlags::kOrigin;
+
+  if (!origin.GetURL().IsStandard()) {
+    // Always return an opaque origin for non-standard URLs. Otherwise, the
+    // CanAccessDataForOrigin() check may fail for unregistered custom
+    // scheme requests in CEF.
+    use_opaque_origin = true;
+    if (cef_nonstandard) {
+      *cef_nonstandard = true;
+    }
+  }
+
   if (use_opaque_origin) {
     origin = origin.DeriveNewOpaqueOrigin();
   }
@@ -8819,8 +8831,9 @@ NavigationRequest::GetOriginForURLLoaderFactoryAfterResponse() {
     return GetRenderFrameHost()->GetLastCommittedOrigin();
   }
 
-  url::Origin origin =
-      GetOriginForURLLoaderFactoryBeforeResponse(SandboxFlagsToCommit());
+  bool cef_nonstandard = false;
+  url::Origin origin = GetOriginForURLLoaderFactoryBeforeResponse(
+      SandboxFlagsToCommit(), &cef_nonstandard);
 
   SCOPED_CRASH_KEY_BOOL("Bug1454273", "is_in_main_frame", IsInMainFrame());
   SCOPED_CRASH_KEY_STRING256(
@@ -8855,10 +8868,17 @@ NavigationRequest::GetOriginForURLLoaderFactoryAfterResponse() {
       DetermineInitiatorRelationship(initiator_rfh,
                                      frame_tree_node_->current_frame_host()));
 
+  if (origin.opaque() && cef_nonstandard) {
+    // Always return an opaque origin for non-standard URLs. Otherwise, the
+    // below CanAccessOrigin() check may fail for unregistered custom scheme
+    // requests in CEF.
+    return origin;
+  }
+
   // MHTML documents should commit as an opaque origin. They should not be able
   // to make network request on behalf of the real origin.
   // TODO(crbug.com/370979008): Migrate to CHECK.
-  DUMP_WILL_BE_CHECK(!IsMhtmlOrSubframe() || origin.opaque());
+  // DUMP_WILL_BE_CHECK(!IsMhtmlOrSubframe() || origin.opaque());
 
   // If the target of this navigation will be rendered in a RenderFrameHost,
   // then verify that the chosen origin is allowed to be accessed from that
diff --git content/browser/renderer_host/navigation_request.h content/browser/renderer_host/navigation_request.h
index a96388a2c5cabaa95b0e1da1fee9187f1bad053b..a5038b0a3dd5c23d23de14694213e1609a2a4640 100644
--- content/browser/renderer_host/navigation_request.h
+++ content/browser/renderer_host/navigation_request.h
@@ -2289,7 +2289,8 @@ class CONTENT_EXPORT NavigationRequest
   // situations where the final frame host hasn't been determined but the origin
   // is needed to create URLLoaderFactory.
   url::Origin GetOriginForURLLoaderFactoryBeforeResponse(
-      network::mojom::WebSandboxFlags sandbox_flags);
+      network::mojom::WebSandboxFlags sandbox_flags,
+      bool* cef_nonstandard = nullptr);
 
   // Superset of GetOriginForURLLoaderFactoryBeforeResponse(). Calculates
   // the origin with information from the final frame host. Can be called only
