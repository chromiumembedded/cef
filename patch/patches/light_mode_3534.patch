diff --git base/win/dark_mode_support.cc base/win/dark_mode_support.cc
index daecebb5070705c1eb5281a3a7df4ace6b89c119..aed51c2e6b06e3527bd6c2003e4b6a82ee4469e5 100644
--- base/win/dark_mode_support.cc
+++ base/win/dark_mode_support.cc
@@ -7,6 +7,7 @@
 #include <windows.h>
 
 #include "base/check.h"
+#include "base/command_line.h"
 #include "base/native_library.h"
 #include "base/win/win_util.h"
 #include "base/win/windows_version.h"
@@ -85,11 +86,20 @@ const DarkModeSupport& GetDarkModeSupport() {
   return dark_mode_support;
 }
 
+bool IsForcedLightMode() {
+  static bool kIsForcedLightMode =
+      base::CommandLine::ForCurrentProcess()->HasSwitch(
+          "force-light-mode");
+  return kIsForcedLightMode;
+}
+
 }  // namespace
 
 namespace base::win {
 
 bool IsDarkModeAvailable() {
+  if (IsForcedLightMode())
+    return false;
   auto& dark_mode_support = GetDarkModeSupport();
   return (dark_mode_support.allow_dark_mode_for_app ||
           dark_mode_support.set_preferred_app_mode) &&
diff --git chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc
index 8eca0f15ad724bfe7b3f83b361984f581f79c347..214eb82df050d5b41efffb8aef44d8ba71e785ae 100644
--- chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc
+++ chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc
@@ -58,7 +58,10 @@ void ChromeBrowserMainExtraPartsViewsLinux::ToolkitInitialized() {
     ui::CursorFactory::GetInstance()->ObserveThemeChanges();
   }
 #if BUILDFLAG(USE_DBUS)
-  dark_mode_manager_ = std::make_unique<ui::DarkModeManagerLinux>();
+  if (!ui::NativeTheme::IsForcedDarkMode() &&
+      !ui::NativeTheme::IsForcedLightMode()) {
+    dark_mode_manager_ = std::make_unique<ui::DarkModeManagerLinux>();
+  }
 #endif
 }
 
diff --git ui/gtk/native_theme_gtk.cc ui/gtk/native_theme_gtk.cc
index a28c128deecd39585b9e54552ffd8986da0df554..e8c8a9825b0feda16b4f36df9590ffe105da2fdf 100644
--- ui/gtk/native_theme_gtk.cc
+++ ui/gtk/native_theme_gtk.cc
@@ -157,9 +157,11 @@ void NativeThemeGtk::OnThemeChanged(GtkSettings* settings,
   // have a light variant and aren't affected by the setting.  Because of this,
   // experimentally check if the theme is dark by checking if the window
   // background color is dark.
-  const SkColor window_bg_color = GetBgColor("");
-  set_use_dark_colors(IsForcedDarkMode() ||
-                      color_utils::IsDark(window_bg_color));
+  if (!IsForcedLightMode()) {
+    const SkColor window_bg_color = GetBgColor("");
+    set_use_dark_colors(IsForcedDarkMode() ||
+                        color_utils::IsDark(window_bg_color));
+  }
   set_preferred_color_scheme(CalculatePreferredColorScheme());
 
   // GTK doesn't have a native high contrast setting.  Rather, it's implied by
diff --git ui/native_theme/native_theme.cc ui/native_theme/native_theme.cc
index 3f8801c6042ef2b20635838e4d4c572d89b94601..c1bcab30a63aae47ffa1dcbfa31b379412911085 100644
--- ui/native_theme/native_theme.cc
+++ ui/native_theme/native_theme.cc
@@ -146,6 +146,7 @@ void NativeTheme::NotifyOnNativeThemeUpdated() {
   color_provider_manager.ResetColorProviderCache();
   native_theme_observers_.Notify(&NativeThemeObserver::OnNativeThemeUpdated,
                                  this);
+  color_provider_manager.AfterNativeThemeUpdated();
 
   RecordNumColorProvidersInitializedDuringOnNativeThemeUpdated(
       color_provider_manager.num_providers_initialized() -
@@ -293,6 +294,13 @@ bool NativeTheme::IsForcedDarkMode() {
   return kIsForcedDarkMode;
 }
 
+bool NativeTheme::IsForcedLightMode() {
+  static bool kIsForcedLightMode =
+      base::CommandLine::ForCurrentProcess()->HasSwitch(
+          "force-light-mode");
+  return kIsForcedLightMode;
+}
+
 bool NativeTheme::IsForcedHighContrast() {
   static bool kIsForcedHighContrast =
       base::CommandLine::ForCurrentProcess()->HasSwitch(
diff --git ui/native_theme/native_theme.h ui/native_theme/native_theme.h
index 97cceb20da0fccf0603cf2d4b1c8985314b1e850..7c2282840ff56239f80c33b86f6a4bff55db409a 100644
--- ui/native_theme/native_theme.h
+++ ui/native_theme/native_theme.h
@@ -636,6 +636,9 @@ class COMPONENT_EXPORT(NATIVE_THEME) NativeTheme {
   // Calculates and returns the use overlay scrollbar setting.
   static bool CalculateUseOverlayScrollbar();
 
+  // Whether light mode is forced via command-line flag.
+  static bool IsForcedLightMode();
+
  protected:
   explicit NativeTheme(
       bool should_only_use_dark_colors,
diff --git ui/native_theme/native_theme_mac.mm ui/native_theme/native_theme_mac.mm
index e41728dd8166362be0d2af7cd3df46a0c7384f12..a6396a778cae60f2b5d324fa7ef1b81973cf1130 100644
--- ui/native_theme/native_theme_mac.mm
+++ ui/native_theme/native_theme_mac.mm
@@ -632,11 +632,15 @@ void NativeThemeMac::PaintSelectedMenuItem(
 
 void NativeThemeMac::InitializeDarkModeStateAndObserver() {
   __block auto theme = this;
-  set_use_dark_colors(IsDarkMode());
+  if (!IsForcedLightMode()) {
+    set_use_dark_colors(IsForcedDarkMode() || IsDarkMode());
+  }
   set_preferred_color_scheme(CalculatePreferredColorScheme());
   appearance_observer_ =
       [[NativeThemeEffectiveAppearanceObserver alloc] initWithHandler:^{
-        theme->set_use_dark_colors(IsDarkMode());
+        if (!IsForcedLightMode()) {
+          theme->set_use_dark_colors(IsForcedDarkMode() || IsDarkMode());
+        }
         theme->set_preferred_color_scheme(CalculatePreferredColorScheme());
         theme->NotifyOnNativeThemeUpdated();
       }];
diff --git ui/native_theme/native_theme_win.cc ui/native_theme/native_theme_win.cc
index 0c6d689295a03fc088b57487037d85f4d634a5f4..dd63350a153c5c5fa75313120bc6460292e8e825 100644
--- ui/native_theme/native_theme_win.cc
+++ ui/native_theme/native_theme_win.cc
@@ -694,7 +694,10 @@ bool NativeThemeWin::ShouldUseDarkColors() const {
   // Windows high contrast modes are entirely different themes,
   // so let them take priority over dark mode.
   // ...unless --force-dark-mode was specified in which case caveat emptor.
-  if (InForcedColorsMode() && !IsForcedDarkMode()) {
+  if (supports_windows_dark_mode_ && IsForcedDarkMode()) {
+    return true;
+  }
+  if (InForcedColorsMode()) {
     return false;
   }
   return NativeTheme::ShouldUseDarkColors();
@@ -702,7 +705,7 @@ bool NativeThemeWin::ShouldUseDarkColors() const {
 
 NativeTheme::PreferredColorScheme
 NativeThemeWin::CalculatePreferredColorScheme() const {
-  if (!InForcedColorsMode()) {
+  if (!InForcedColorsMode() || !supports_windows_dark_mode_) {
     return NativeTheme::CalculatePreferredColorScheme();
   }
 
@@ -1688,9 +1691,10 @@ void NativeThemeWin::RegisterColorFilteringRegkeyObserver() {
 }
 
 void NativeThemeWin::UpdateDarkModeStatus() {
-  bool dark_mode_enabled = false;
-  bool system_dark_mode_enabled = false;
-  if (hkcu_themes_regkey_.Valid()) {
+  bool dark_mode_enabled = ShouldUseDarkColors();
+  bool system_dark_mode_enabled = ShouldUseDarkColors();
+  if (supports_windows_dark_mode_ && !IsForcedDarkMode() &&
+      hkcu_themes_regkey_.Valid()) {
     DWORD apps_use_light_theme = 1;
     hkcu_themes_regkey_.ReadValueDW(L"AppsUseLightTheme",
                                     &apps_use_light_theme);
