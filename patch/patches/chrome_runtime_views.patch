diff --git chrome/browser/ui/browser_command_controller.cc chrome/browser/ui/browser_command_controller.cc
index 24555cea8118e46f31700bbf869754b1ae1cfb20..f5352fefb0b4a78bd873462c56175e139906316d 100644
--- chrome/browser/ui/browser_command_controller.cc
+++ chrome/browser/ui/browser_command_controller.cc
@@ -478,6 +478,7 @@ bool BrowserCommandController::ExecuteCommandWithDisposition(
   // choose to not implement CommandUpdaterDelegate inside this class and
   // therefore command_updater_ doesn't have the delegate set).
   if (!SupportsCommand(id) || !IsCommandEnabled(id)) {
+    LOG(WARNING) << "Invalid/disabled command " << id;
     return false;
   }
 
@@ -495,6 +496,13 @@ bool BrowserCommandController::ExecuteCommandWithDisposition(
   DCHECK(command_updater_.IsCommandEnabled(id))
       << "Invalid/disabled command " << id;
 
+#if BUILDFLAG(ENABLE_CEF)
+  if (browser_->cef_delegate() &&
+      browser_->cef_delegate()->HandleCommand(id, disposition)) {
+    return true;
+  }
+#endif
+
   // The order of commands in this switch statement must match the function
   // declaration order in browser.h!
   switch (id) {
@@ -1331,11 +1339,13 @@ void BrowserCommandController::TabRestoreServiceLoaded(
 // BrowserCommandController, private:
 
 bool BrowserCommandController::IsShowingMainUI() {
-  return browser_->SupportsWindowFeature(Browser::FEATURE_TABSTRIP);
+  return browser_->SupportsWindowFeature(Browser::FEATURE_TABSTRIP) ||
+         browser_->toolbar_overridden();
 }
 
 bool BrowserCommandController::IsShowingLocationBar() {
-  return browser_->SupportsWindowFeature(Browser::FEATURE_LOCATIONBAR);
+  return browser_->SupportsWindowFeature(Browser::FEATURE_LOCATIONBAR) ||
+         browser_->toolbar_overridden();
 }
 
 void BrowserCommandController::InitCommandState() {
diff --git chrome/browser/ui/toolbar/app_menu_model.cc chrome/browser/ui/toolbar/app_menu_model.cc
index 0598ce596c024fa43c3953a4199d251002741585..903b244196e6f879475ee4ac5362975651878b8a 100644
--- chrome/browser/ui/toolbar/app_menu_model.cc
+++ chrome/browser/ui/toolbar/app_menu_model.cc
@@ -721,10 +721,12 @@ FindAndEditSubMenuModel::FindAndEditSubMenuModel(
     ui::SimpleMenuModel::Delegate* delegate)
     : SimpleMenuModel(delegate) {
   AddItemWithStringIdAndVectorIcon(this, IDC_FIND, IDS_FIND, kSearchMenuIcon);
+  if (delegate->IsCommandIdVisible(IDC_EDIT_MENU)) {
   AddSeparator(ui::NORMAL_SEPARATOR);
   AddItemWithStringIdAndVectorIcon(this, IDC_CUT, IDS_CUT, kCutMenuIcon);
   AddItemWithStringIdAndVectorIcon(this, IDC_COPY, IDS_COPY, kCopyMenuIcon);
   AddItemWithStringIdAndVectorIcon(this, IDC_PASTE, IDS_PASTE, kPasteMenuIcon);
+  }
 }
 
 class SaveAndShareSubMenuModel : public ui::SimpleMenuModel {
@@ -789,6 +791,57 @@ SaveAndShareSubMenuModel::SaveAndShareSubMenuModel(
   }
 }
 
+#if BUILDFLAG(ENABLE_CEF)
+using IsVisibleCallback = base::RepeatingCallback<bool(int)>;
+
+void FilterMenuModel(ui::SimpleMenuModel* model,
+                     const IsVisibleCallback& is_visible) {
+  std::optional<size_t> last_separator;
+  size_t visible_ct = 0;
+  for (size_t i = 0; i < model->GetItemCount(); ++i) {
+    const auto type = model->GetTypeAt(i);
+    if (type == ui::MenuModel::TYPE_SEPARATOR) {
+      if (last_separator) {
+        // Remove multiple separators in a row. Prefer to remove a NORMAL
+        // separator if possible (as compared to zoom/edit controls which use
+        // UPPER/LOWER separators).
+        if (model->GetSeparatorTypeAt(*last_separator) ==
+            ui::NORMAL_SEPARATOR) {
+          model->RemoveItemAt(*last_separator);
+          i--;
+          last_separator = i;
+        } else {
+          model->RemoveItemAt(i);
+          i--;
+        }
+      } else if (visible_ct == 0) {
+        // Remove leading separator.
+        model->RemoveItemAt(i);
+        i--;
+      } else {
+        last_separator = i;
+      }
+      visible_ct = 0;
+    } else if (is_visible.Run(model->GetCommandIdAt(i))) {
+      last_separator = std::nullopt;
+      visible_ct++;
+
+      if (type == ui::MenuModel::TYPE_SUBMENU) {
+        // Filter sub-menu.
+        auto sub_model =
+            static_cast<ui::SimpleMenuModel*>(model->GetSubmenuModelAt(i));
+        FilterMenuModel(sub_model, is_visible);
+      }
+    }
+  }
+
+  if (last_separator) {
+    // Remove trailing separator.
+    model->RemoveItemAt(*last_separator);
+  }
+}
+#endif  // BUILDFLAG(ENABLE_CEF)
+
 }  // namespace
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -1734,7 +1787,7 @@ bool AppMenuModel::IsCommandIdChecked(int command_id) const {
   return false;
 }
 
-bool AppMenuModel::IsCommandIdEnabled(int command_id) const {
+bool AppMenuModel::IsCommandIdEnabledInternal(int command_id) const {
   GlobalError* error =
       GlobalErrorServiceFactory::GetForProfile(browser_->profile())
           ->GetGlobalErrorByMenuItemCommandID(command_id);
@@ -1750,6 +1803,30 @@ bool AppMenuModel::IsCommandIdEnabled(int command_id) const {
   }
 }
 
+bool AppMenuModel::IsCommandIdEnabled(int command_id) const {
+  if (!IsCommandIdEnabledInternal(command_id)) {
+    return false;
+  }
+
+#if BUILDFLAG(ENABLE_CEF)
+  if (browser_->cef_delegate()) {
+    return browser_->cef_delegate()->IsAppMenuItemEnabled(command_id);
+  }
+#endif
+
+  return true;
+}
+
+bool AppMenuModel::IsCommandIdVisible(int command_id) const {
+#if BUILDFLAG(ENABLE_CEF)
+  if (browser_->cef_delegate()) {
+    return browser_->cef_delegate()->IsAppMenuItemVisible(command_id);
+  }
+#endif
+
+  return true;
+}
+
 bool AppMenuModel::IsCommandIdAlerted(int command_id) const {
   if (command_id == IDC_VIEW_PASSWORDS ||
       command_id == IDC_SHOW_PASSWORD_MANAGER) {
@@ -1913,8 +1990,10 @@ void AppMenuModel::Build() {
                                    IDS_CLEAR_BROWSING_DATA,
                                    kTrashCanRefreshIcon);
 
+  if (IsCommandIdVisible(IDC_ZOOM_MENU)) {
   AddSeparator(ui::NORMAL_SEPARATOR);
   CreateZoomMenu();
+  }
   AddSeparator(ui::NORMAL_SEPARATOR);
 
   AddItemWithStringIdAndVectorIcon(this, IDC_PRINT, IDS_PRINT, kPrintMenuIcon);
@@ -2025,6 +2104,11 @@ void AppMenuModel::Build() {
   }
 #endif  // !BUILDFLAG(IS_CHROMEOS)
 
+#if BUILDFLAG(ENABLE_CEF)
+  FilterMenuModel(this, base::BindRepeating(&AppMenuModel::IsCommandIdVisible,
+                                            base::Unretained(this)));
+#endif
+
   uma_action_recorded_ = false;
 }
 
diff --git chrome/browser/ui/toolbar/app_menu_model.h chrome/browser/ui/toolbar/app_menu_model.h
index ec1f1a15c682ead6de1696b627e3d34a75718518..23163078693fbcd24ff26aa7e5e4eb2ce9fd0235 100644
--- chrome/browser/ui/toolbar/app_menu_model.h
+++ chrome/browser/ui/toolbar/app_menu_model.h
@@ -233,6 +233,7 @@ class AppMenuModel : public ui::SimpleMenuModel,
   void ExecuteCommand(int command_id, int event_flags) override;
   bool IsCommandIdChecked(int command_id) const override;
   bool IsCommandIdEnabled(int command_id) const override;
+  bool IsCommandIdVisible(int command_id) const override;
   bool IsCommandIdAlerted(int command_id) const override;
   bool IsElementIdAlerted(ui::ElementIdentifier element_id) const override;
   bool GetAcceleratorForCommandId(int command_id,
@@ -273,6 +274,8 @@ class AppMenuModel : public ui::SimpleMenuModel,
   void LogSafetyHubInteractionMetrics(safety_hub::SafetyHubModuleType sh_module,
                                       int event_flags);
 
+  bool IsCommandIdEnabledInternal(int command_id) const;
+
  private:
   // Adds actionable global error menu items to the menu.
   // Examples: Extension permissions and sign in errors.
diff --git chrome/browser/ui/views/find_bar_host.cc chrome/browser/ui/views/find_bar_host.cc
index 9bae9fa1c73522d3457177f5c2eb55d15c1adf89..b4b8abba9f1a55887b011fecab1c987ae0cb601b 100644
--- chrome/browser/ui/views/find_bar_host.cc
+++ chrome/browser/ui/views/find_bar_host.cc
@@ -614,6 +614,14 @@ gfx::Rect FindBarHost::GetDialogPosition(gfx::Rect avoid_overlapping_rect) {
   // The BrowserView does Layout for the components that we care about
   // positioning relative to, so we ask it to tell us where we should go.
   gfx::Rect find_bar_bounds = browser_view_->GetFindBarBoundingBox();
+
+#if BUILDFLAG(ENABLE_CEF)
+  if (browser_view_->browser() && browser_view_->browser()->cef_delegate()) {
+    browser_view_->browser()->cef_delegate()->UpdateFindBarBoundingBox(
+        &find_bar_bounds);
+  }
+#endif
+
   if (find_bar_bounds.IsEmpty()) {
     return gfx::Rect();
   }
diff --git chrome/browser/ui/views/frame/browser_frame.cc chrome/browser/ui/views/frame/browser_frame.cc
index 9e8be2b29d39d1820bc9a19f48541d05c2382c85..c177211d671229ebd97672a8a6647267cf3679d8 100644
--- chrome/browser/ui/views/frame/browser_frame.cc
+++ chrome/browser/ui/views/frame/browser_frame.cc
@@ -123,15 +123,25 @@ ui::ColorProviderKey::SchemeVariant GetSchemeVariant(
 ////////////////////////////////////////////////////////////////////////////////
 // BrowserFrame, public:
 
+BrowserFrame::BrowserFrame() : BrowserFrame(nullptr) {}
+
 BrowserFrame::BrowserFrame(BrowserView* browser_view)
     : native_browser_frame_(nullptr),
       root_view_(nullptr),
       browser_frame_view_(nullptr),
-      browser_view_(browser_view) {
-  browser_view_->set_frame(this);
+      browser_view_(nullptr) {
   set_is_secondary_widget(false);
   // Don't focus anything on creation, selecting a tab will set the focus.
   set_focus_on_creation(false);
+  if (browser_view)
+    SetBrowserView(browser_view);
+}
+
+void BrowserFrame::SetBrowserView(BrowserView* browser_view) {
+  browser_view_ = browser_view;
+  if (browser_view_) {
+    browser_view_->set_frame(this);
+  }
 }
 
 BrowserFrame::~BrowserFrame() = default;
@@ -292,10 +302,20 @@ void BrowserFrame::LayoutWebAppWindowTitle(
 }
 
 int BrowserFrame::GetTopInset() const {
+  if (!browser_frame_view_) {
+    // With CEF the browser may already be part of a larger Views layout. Zero
+    // out the adjustment in BrowserView::GetTopInsetInBrowserView() so that
+    // the browser isn't shifted to the top of the window.
+    return browser_view_->y();
+  }
   return browser_frame_view_->GetTopInset(false);
 }
 
 void BrowserFrame::UpdateThrobber(bool running) {
+  if (!browser_frame_view_) {
+    // Not supported with CEF Views-hosted DevTools windows.
+    return;
+  }
   browser_frame_view_->UpdateThrobber(running);
 }
 
@@ -304,6 +324,8 @@ BrowserNonClientFrameView* BrowserFrame::GetFrameView() const {
 }
 
 bool BrowserFrame::UseCustomFrame() const {
+  if (!native_browser_frame_)
+    return true;
   return native_browser_frame_->UseCustomFrame();
 }
 
@@ -318,20 +340,30 @@ bool BrowserFrame::ShouldDrawFrameHeader() const {
 void BrowserFrame::GetWindowPlacement(
     gfx::Rect* bounds,
     ui::mojom::WindowShowState* show_state) const {
+  if (!native_browser_frame_) {
+    *show_state = ui::mojom::WindowShowState::kDefault;
+    return;
+  }
   return native_browser_frame_->GetWindowPlacement(bounds, show_state);
 }
 
 content::KeyboardEventProcessingResult BrowserFrame::PreHandleKeyboardEvent(
     const input::NativeWebKeyboardEvent& event) {
+  if (!native_browser_frame_)
+    return content::KeyboardEventProcessingResult::NOT_HANDLED;
   return native_browser_frame_->PreHandleKeyboardEvent(event);
 }
 
 bool BrowserFrame::HandleKeyboardEvent(
     const input::NativeWebKeyboardEvent& event) {
+  if (!native_browser_frame_)
+    return false;
   return native_browser_frame_->HandleKeyboardEvent(event);
 }
 
 void BrowserFrame::OnBrowserViewInitViewsComplete() {
+  if (!browser_frame_view_)
+    return;
   browser_frame_view_->OnBrowserViewInitViewsComplete();
 }
 
@@ -431,6 +463,8 @@ ui::ColorProviderKey::ThemeInitializerSupplier* BrowserFrame::GetCustomTheme()
 }
 
 void BrowserFrame::OnNativeWidgetWorkspaceChanged() {
+  if (!browser_view_)
+    return;
   chrome::SaveWindowWorkspace(browser_view_->browser(), GetWorkspace());
   chrome::SaveWindowVisibleOnAllWorkspaces(browser_view_->browser(),
                                            IsVisibleOnAllWorkspaces());
@@ -642,6 +676,13 @@ void BrowserFrame::SelectNativeTheme() {
     return;
   }
 
+  // Always use the NativeTheme for forced color modes.
+  if (ui::NativeTheme::IsForcedDarkMode() ||
+      ui::NativeTheme::IsForcedLightMode()) {
+    SetNativeTheme(native_theme);
+    return;
+  }
+
   // Ignore the system theme for web apps with window-controls-overlay as the
   // display_override so the web contents can blend with the overlay by using
   // the developer-provided theme color for a better experience. Context:
@@ -707,5 +748,8 @@ bool BrowserFrame::RegenerateFrameOnThemeChange(
 }
 
 bool BrowserFrame::IsIncognitoBrowser() const {
+  if (!browser_view_) {
+    return true;
+  }
   return browser_view_->browser()->profile()->IsIncognitoProfile();
 }
diff --git chrome/browser/ui/views/frame/browser_frame.h chrome/browser/ui/views/frame/browser_frame.h
index 3d8a15049d4d2286bbcfefa0e7d9778d69ce4696..66c4789581fe1b54d587466a3fdd51971fa7d815 100644
--- chrome/browser/ui/views/frame/browser_frame.h
+++ chrome/browser/ui/views/frame/browser_frame.h
@@ -59,6 +59,7 @@ enum class TabDragKind {
 // This is a virtual interface that allows system specific browser frames.
 class BrowserFrame : public views::Widget, public views::ContextMenuController {
  public:
+  BrowserFrame();
   explicit BrowserFrame(BrowserView* browser_view);
 
   BrowserFrame(const BrowserFrame&) = delete;
@@ -138,7 +139,7 @@ class BrowserFrame : public views::Widget, public views::ContextMenuController {
 
   // ThemeService calls this when a user has changed their theme, indicating
   // that it's time to redraw everything.
-  void UserChangedTheme(BrowserThemeChangeType theme_change_type);
+  virtual void UserChangedTheme(BrowserThemeChangeType theme_change_type);
 
   // views::Widget:
   views::internal::RootView* CreateRootView() override;
@@ -172,22 +173,26 @@ class BrowserFrame : public views::Widget, public views::ContextMenuController {
   void SetTabDragKind(TabDragKind tab_drag_kind);
   TabDragKind tab_drag_kind() const { return tab_drag_kind_; }
 
+  BrowserView* browser_view() const { return browser_view_.get(); }
+
  protected:
+  void SetBrowserView(BrowserView* browser_view);
+
   // views::Widget:
   void OnNativeThemeUpdated(ui::NativeTheme* observed_theme) override;
   ui::ColorProviderKey GetColorProviderKey() const override;
 
+  // Select a native theme that is appropriate for the current context. This is
+  // currently only needed for Linux to switch between the regular NativeTheme
+  // and the GTK NativeTheme instance.
+  void SelectNativeTheme();
+
  private:
   void OnTouchUiChanged();
 
   // Callback for MenuRunner.
   void OnMenuClosed();
 
-  // Select a native theme that is appropriate for the current context. This is
-  // currently only needed for Linux to switch between the regular NativeTheme
-  // and the GTK NativeTheme instance.
-  void SelectNativeTheme();
-
   // Regenerate the frame on theme change if necessary. Returns true if
   // regenerated.
   bool RegenerateFrameOnThemeChange(BrowserThemeChangeType theme_change_type);
diff --git chrome/browser/ui/views/frame/browser_view.cc chrome/browser/ui/views/frame/browser_view.cc
index 8f8095452f9dcbe67333dcadfd5ce3a42b4cedd5..e42d71196aa57b7788d6580e0e83e07648b38ac0 100644
--- chrome/browser/ui/views/frame/browser_view.cc
+++ chrome/browser/ui/views/frame/browser_view.cc
@@ -375,10 +375,6 @@ using web_modal::WebContentsModalDialogHost;
 
 namespace {
 
-// The name of a key to store on the window handle so that other code can
-// locate this object using just the handle.
-const char* const kBrowserViewKey = "__BROWSER_VIEW__";
-
 // The visible height of the shadow above the tabs. Clicks in this area are
 // treated as clicks to the frame, rather than clicks to the tab.
 const int kTabShadowSize = 2;
@@ -797,6 +793,14 @@ class BrowserViewLayoutDelegateImpl : public BrowserViewLayoutDelegate {
     return browser_view_->frame()->GetTopInset() - browser_view_->y();
   }
 
+  void UpdateDialogTopInsetInBrowserView(int* dialog_top_y) const override {
+#if BUILDFLAG(ENABLE_CEF)
+    if (auto cef_delegate = browser_view_->browser_->cef_delegate()) {
+      cef_delegate->UpdateDialogTopInset(dialog_top_y);
+    }
+#endif
+  }
+
   bool IsToolbarVisible() const override {
     return browser_view_->IsToolbarVisible();
   }
@@ -933,11 +937,21 @@ class BrowserView::AccessibilityModeObserver : public ui::AXModeObserver {
 ///////////////////////////////////////////////////////////////////////////////
 // BrowserView, public:
 
+BrowserView::BrowserView() : BrowserView(nullptr) {}
+
 BrowserView::BrowserView(std::unique_ptr<Browser> browser)
     : views::ClientView(nullptr, nullptr),
-      browser_(std::move(browser)),
       accessibility_mode_observer_(
           std::make_unique<AccessibilityModeObserver>(this)) {
+  if (browser) {
+    InitBrowser(std::move(browser));
+  }
+}
+
+void BrowserView::InitBrowser(std::unique_ptr<Browser> browser) {
+  DCHECK(!browser_);
+  browser_ = std::move(browser);
+
   SetShowIcon(::ShouldShowWindowIcon(
       browser_.get(), AppUsesWindowControlsOverlay(), AppUsesTabbed()));
 
@@ -1108,8 +1122,15 @@ BrowserView::BrowserView(std::unique_ptr<Browser> browser)
       new_tab_footer_web_view_separator_, new_tab_footer_web_view_));
 #endif
 
-  toolbar_ = top_container_->AddChildView(
-      std::make_unique<ToolbarView>(browser_.get(), this));
+  toolbar_ = OverrideCreateToolbar();
+  if (!toolbar_) {
+    toolbar_ = new ToolbarView(browser_.get(), this, std::nullopt);
+  } else {
+    browser_->set_toolbar_overridden(true);
+    // Update state that depends on the above flag.
+    browser_->command_controller()->FullscreenStateChanged();
+  }
+  top_container_->AddChildView(base::WrapUnique(toolbar_.get()));
 
   contents_separator_ =
       top_container_->AddChildView(std::make_unique<ContentsSeparator>());
@@ -1186,7 +1207,9 @@ BrowserView::BrowserView(std::unique_ptr<Browser> browser)
 }
 
 BrowserView::~BrowserView() {
+  if (browser_) {
   browser_->GetFeatures().TearDownPreBrowserWindowDestruction();
+  }
 
   // Remove the layout manager to avoid dangling. This needs to be earlier than
   // other cleanups that destroy views referenced in the layout manager.
@@ -1198,9 +1221,11 @@ BrowserView::~BrowserView() {
   // tabstrip model and the browser frame.
   top_controls_slide_controller_.reset();
 
+  if (browser_) {
   // All the tabs should have been destroyed already. If we were closed by the
   // OS with some tabs than the NativeBrowserFrame should have destroyed them.
   DCHECK_EQ(0, browser_->tab_strip_model()->count());
+  }
 
   // Stop the animation timer explicitly here to avoid running it in a nested
   // message loop, which may run by Browser destructor.
@@ -1209,17 +1234,18 @@ BrowserView::~BrowserView() {
   // Immersive mode may need to reparent views before they are removed/deleted.
   immersive_mode_controller_.reset();
 
-  // Reset autofill bubble handler to make sure it does not out-live toolbar,
-  // since it is responsible for showing autofill related bubbles from toolbar's
-  // child views and it is an observer for avatar toolbar button if any.
-  autofill_bubble_handler_.reset();
+  // If the Toolbar is not overloaded it will be destroyed via
+  // RemoveAllChildViews().
+  WillDestroyToolbar();
 
+  if (browser_) {
   auto* global_registry =
       extensions::ExtensionCommandsGlobalRegistry::Get(browser_->profile());
   if (global_registry->registry_for_active_window() ==
       extension_keybinding_registry_.get()) {
     global_registry->set_registry_for_active_window(nullptr);
   }
+  }
 
   // These are raw pointers to child views, so they need to be set to null
   // before `RemoveAllChildViews()` is called to avoid dangling.
@@ -1848,6 +1874,28 @@ gfx::Point BrowserView::GetThemeOffsetFromBrowserView() const {
       ThemeProperties::kFrameHeightAboveTabs - browser_view_origin.y());
 }
 
+void BrowserView::WillDestroyToolbar() {
+  // Reset autofill bubble handler to make sure it does not out-live toolbar,
+  // since it is responsible for showing autofill related bubbles from toolbar's
+  // child views and it is an observer for avatar toolbar button if any.
+  autofill_bubble_handler_.reset();
+
+  toolbar_button_provider_ = nullptr;
+  if (GetBrowserViewLayout()) {
+    GetBrowserViewLayout()->reset_toolbar();
+  }
+
+  if (toolbar_ && toolbar_->parent()) {
+    // Remove now instead of waiting for RemoveAllChildViews(), as there is
+    // otherwise no guarantee that the Toolbar will be removed before the
+    // BrowserView is removed (and destroyed).
+    toolbar_->parent()->RemoveChildView(toolbar_);
+    toolbar_.ClearAndDelete();
+  } else {
+    toolbar_ = nullptr;
+  }
+}
+
 // static:
 BrowserView::DevToolsDockedPlacement BrowserView::GetDevToolsDockedPlacement(
     const gfx::Rect& contents_webview_bounds,
@@ -2318,7 +2366,13 @@ void BrowserView::OnExclusiveAccessUserInput() {
 
 bool BrowserView::ShouldHideUIForFullscreen() const {
   // Immersive mode needs UI for the slide-down top panel.
-  if (immersive_mode_controller_->IsEnabled()) {
+  // Avoid callback into |immersive_mode_controller_| during construction.
+  // See CEF issue #3527.
+  if (immersive_mode_controller_ && immersive_mode_controller_->IsEnabled()) {
+    return false;
+  }
+
+  if (!frame_->GetFrameView()) {
     return false;
   }
 
@@ -3534,6 +3588,9 @@ views::View* BrowserView::GetLensOverlayView() {
 }
 
 DownloadBubbleUIController* BrowserView::GetDownloadBubbleUIController() {
+  if (!browser_) {
+    return nullptr;
+  }
   if (auto* download_controller =
           browser_->GetFeatures().download_toolbar_ui_controller()) {
     return download_controller->bubble_controller();
@@ -4290,7 +4347,9 @@ void BrowserView::ReparentTopContainerForEndOfImmersive() {
     return;
   }
 
+  if (overlay_view_) {
   overlay_view_->SetVisible(false);
+  }
   top_container()->DestroyLayer();
   AddChildViewAt(top_container(), 0);
   EnsureFocusOrder();
@@ -4957,11 +5016,38 @@ void BrowserView::GetAccessiblePanes(std::vector<views::View*>* panes) {
 bool BrowserView::ShouldDescendIntoChildForEventHandling(
     gfx::NativeView child,
     const gfx::Point& location) {
+#if BUILDFLAG(ENABLE_CEF)
+  const bool frameless_pip =
+      GetIsPictureInPictureType() &&
+      !browser_->SupportsWindowFeature(Browser::FEATURE_TITLEBAR);
+  if (frameless_pip) {
+    if (auto frame_view = frame()->GetFrameView()) {
+      int result = frame_view->NonClientHitTest(location);
+      if (result == HTTOP || result == HTTOPLEFT || result == HTTOPRIGHT) {
+        // Allow resize from the top of a frameless window.
+        return false;
+      }
+    }
+  }
+#endif
+
+  std::optional<SkRegion> draggable_region;
+
   // Window for PWAs with window-controls-overlay display override should claim
   // mouse events that fall within the draggable region.
   web_app::AppBrowserController* controller = browser()->app_controller();
-  if (AreDraggableRegionsEnabled() && controller &&
-      controller->draggable_region().has_value()) {
+  if (AreDraggableRegionsEnabled() && controller) {
+    draggable_region = controller->draggable_region();
+  }
+
+#if BUILDFLAG(ENABLE_CEF)
+  // Match logic in PictureInPictureBrowserFrameView::NonClientHitTest.
+  if (!draggable_region.has_value() && frameless_pip) {
+    draggable_region = browser_->cef_delegate()->GetDraggableRegion();
+  }
+#endif
+
+  if (draggable_region.has_value()) {
     // Draggable regions are defined relative to the web contents.
     gfx::Point point_in_contents_web_view_coords(location);
     views::View::ConvertPointToTarget(GetWidget()->GetRootView(),
@@ -4970,7 +5056,7 @@ bool BrowserView::ShouldDescendIntoChildForEventHandling(
 
     // Draggable regions should be ignored for clicks into any browser view's
     // owned widgets, for example alerts, permission prompts or find bar.
-    return !controller->draggable_region()->contains(
+    return !draggable_region->contains(
                point_in_contents_web_view_coords.x(),
                point_in_contents_web_view_coords.y()) ||
            WidgetOwnedByAnchorContainsPoint(point_in_contents_web_view_coords);
@@ -5202,8 +5288,11 @@ void BrowserView::Layout(PassKey) {
 
   // TODO(jamescook): Why was this in the middle of layout code?
   toolbar_->location_bar()->omnibox_view()->SetFocusBehavior(
-      IsToolbarVisible() ? FocusBehavior::ALWAYS : FocusBehavior::NEVER);
+      (IsToolbarVisible() || browser_->toolbar_overridden()) ?
+          FocusBehavior::ALWAYS : FocusBehavior::NEVER);
+  if (frame()->GetFrameView()) {
   frame()->GetFrameView()->UpdateMinimumSize();
+  }
 
   // Some of the situations when the BrowserView is laid out are:
   // - Enter/exit immersive fullscreen mode.
@@ -5270,6 +5359,12 @@ void BrowserView::AddedToWidget() {
   SetThemeProfileForWindow(GetNativeWindow(), browser_->profile());
 #endif
 
+  // This browser view may already have a custom button provider set (e.g the
+  // hosted app frame).
+  if (!toolbar_button_provider_) {
+    SetToolbarButtonProvider(toolbar_);
+  }
+
   toolbar_->Init();
 
   if (GetIsNormalType()) {
@@ -5327,18 +5422,14 @@ void BrowserView::AddedToWidget() {
 
   EnsureFocusOrder();
 
-  // This browser view may already have a custom button provider set (e.g the
-  // hosted app frame).
-  if (!toolbar_button_provider_) {
-    SetToolbarButtonProvider(toolbar_);
-  }
-
   if (download::IsDownloadBubbleEnabled()) {
     browser_->GetFeatures().download_toolbar_ui_controller()->Init();
   }
 
   frame_->OnBrowserViewInitViewsComplete();
+  if (frame_->GetFrameView()) {
   frame_->GetFrameView()->UpdateMinimumSize();
+  }
   using_native_frame_ = frame_->ShouldUseNativeFrame();
 
   MaybeInitializeWebUITabStrip();
@@ -5758,7 +5849,9 @@ void BrowserView::ProcessFullscreen(bool fullscreen, const int64_t display_id) {
   // Undo our anti-jankiness hacks and force a re-layout.
   in_process_fullscreen_ = false;
   ToolbarSizeChanged(false);
+  if (frame_->GetFrameView()) {
   frame_->GetFrameView()->OnFullscreenStateChanged();
+  }
 }
 
 void BrowserView::RequestFullscreen(bool fullscreen, int64_t display_id) {
@@ -6279,7 +6372,9 @@ Profile* BrowserView::GetProfile() {
 }
 
 void BrowserView::UpdateUIForTabFullscreen() {
+  if (frame()->GetFrameView()) {
   frame()->GetFrameView()->UpdateFullscreenTopUI();
+  }
 }
 
 WebContents* BrowserView::GetWebContentsForExclusiveAccess() {
@@ -6308,6 +6403,9 @@ bool BrowserView::CanUserEnterFullscreen() const {
 }
 
 bool BrowserView::CanUserExitFullscreen() const {
+  if (!frame_->GetFrameView()) {
+    return true;
+  }
   return frame_->GetFrameView()->CanUserExitFullscreen();
 }
 
diff --git chrome/browser/ui/views/frame/browser_view.h chrome/browser/ui/views/frame/browser_view.h
index e14b0b8fe30aa5c18766518377602a539771e232..62f47e135483de2a9cfc0bb323c38957336cdb59 100644
--- chrome/browser/ui/views/frame/browser_view.h
+++ chrome/browser/ui/views/frame/browser_view.h
@@ -149,11 +149,16 @@ class BrowserView : public BrowserWindow,
   METADATA_HEADER(BrowserView, views::ClientView)
 
  public:
+  BrowserView();
   explicit BrowserView(std::unique_ptr<Browser> browser);
+  void InitBrowser(std::unique_ptr<Browser> browser);
   BrowserView(const BrowserView&) = delete;
   BrowserView& operator=(const BrowserView&) = delete;
   ~BrowserView() override;
 
+  // Key used to bind BrowserView to the Widget with which it is associated.
+  static constexpr char kBrowserViewKey[] = "__BROWSER_VIEW__";
+
   void set_frame(BrowserFrame* frame) {
     frame_ = frame;
     paint_as_active_subscription_ =
@@ -910,6 +915,10 @@ class BrowserView : public BrowserWindow,
   void Copy();
   void Paste();
 
+  // Called during Toolbar destruction to remove dependent objects that have
+  // dangling references.
+  virtual void WillDestroyToolbar();
+
  protected:
   // Enumerates where the devtools are docked relative to the browser's main
   // web contents.
@@ -933,6 +942,8 @@ class BrowserView : public BrowserWindow,
       const gfx::Rect& contents_webview_bounds,
       const gfx::Rect& local_webview_container_bounds);
 
+  virtual ToolbarView* OverrideCreateToolbar() { return nullptr; }
+
  private:
   // Do not friend BrowserViewLayout. Use the BrowserViewLayoutDelegate
   // interface to keep these two classes decoupled and testable.
diff --git chrome/browser/ui/views/frame/browser_view_layout.cc chrome/browser/ui/views/frame/browser_view_layout.cc
index fb2d7b8152e29cc0e361a581e1b484554a5d7416..d50c6d4e7b25fabbfdf765593f1db0653c4bd4ca 100644
--- chrome/browser/ui/views/frame/browser_view_layout.cc
+++ chrome/browser/ui/views/frame/browser_view_layout.cc
@@ -53,6 +53,10 @@
 #include "ui/views/window/client_view.h"
 #include "ui/views/window/hit_test_utils.h"
 
+#if BUILDFLAG(ENABLE_CEF)
+#include "cef/libcef/browser/chrome/views/chrome_views_util.h"
+#endif
+
 using views::View;
 using web_modal::ModalDialogHostObserver;
 using web_modal::WebContentsModalDialogHost;
@@ -117,6 +121,10 @@ class BrowserViewLayout::WebContentsModalDialogHostViews
     observer_list_.Notify(&ModalDialogHostObserver::OnHostDestroying);
   }
 
+  bool HasObservers() const {
+    return !observer_list_.empty();
+  }
+
   void NotifyPositionRequiresUpdate() {
     observer_list_.Notify(&ModalDialogHostObserver::OnPositionRequiresUpdate);
   }
@@ -149,7 +157,7 @@ class BrowserViewLayout::WebContentsModalDialogHostViews
     const int middle_x =
         leading_x + layout_result.contents_container_bounds.width() / 2;
     return gfx::Point(middle_x - dialog_size.width() / 2,
-                      browser_view_layout_->dialog_top_y_);
+                      GetDialogTopY());
   }
 
   bool ShouldActivateDialog() const override {
@@ -171,7 +179,7 @@ class BrowserViewLayout::WebContentsModalDialogHostViews
     // universally.
     views::View* view = browser_view_layout_->contents_container_;
     gfx::Rect content_area = view->ConvertRectToWidget(view->GetLocalBounds());
-    const int top = browser_view_layout_->dialog_top_y_;
+    const int top = GetDialogTopY();
     return gfx::Size(content_area.width(), content_area.bottom() - top);
   }
 
@@ -200,6 +208,13 @@ class BrowserViewLayout::WebContentsModalDialogHostViews
     return host_widget ? host_widget->GetNativeView() : gfx::NativeView();
   }
 
+  int GetDialogTopY() const {
+    int dialog_top_y = browser_view_layout_->dialog_top_y_;
+    browser_view_layout_->delegate_->UpdateDialogTopInsetInBrowserView(
+        &dialog_top_y);
+    return dialog_top_y;
+  }
+
   // Add/remove observer.
   void AddObserver(ModalDialogHostObserver* observer) override {
     observer_list_.AddObserver(observer);
@@ -394,6 +409,8 @@ void BrowserViewLayout::Layout(views::View* browser_view) {
     exclusive_access_bubble->RepositionIfVisible();
   }
 
+  // Avoid unnecessary calls to UpdateDialogTopInsetInBrowserView().
+  if (dialog_host_->HasObservers()) {
   // Adjust any hosted dialogs if the browser's dialog hosting bounds changed.
   const gfx::Rect dialog_bounds(dialog_host_->GetDialogPosition(gfx::Size()),
                                 dialog_host_->GetMaximumDialogSize());
@@ -407,6 +424,7 @@ void BrowserViewLayout::Layout(views::View* browser_view) {
     latest_dialog_bounds_in_screen_ = dialog_bounds_in_screen;
     dialog_host_->NotifyPositionRequiresUpdate();
   }
+  }
 }
 
 gfx::Size BrowserViewLayout::GetPreferredSize(
@@ -543,6 +561,13 @@ int BrowserViewLayout::LayoutWebUITabStrip(int top) {
 
 int BrowserViewLayout::LayoutToolbar(int top) {
   TRACE_EVENT0("ui", "BrowserViewLayout::LayoutToolbar");
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef::IsCefView(toolbar_)) {
+    // CEF may take ownership of the toolbar. Early exit to avoid the DCHECK
+    // in LayoutManager::SetViewVisibility().
+    return top;
+  }
+#endif
   int browser_view_width = vertical_layout_rect_.width();
   bool toolbar_visible = delegate_->IsToolbarVisible();
   int height = toolbar_visible ? toolbar_->GetPreferredSize().height() : 0;
diff --git chrome/browser/ui/views/frame/browser_view_layout.h chrome/browser/ui/views/frame/browser_view_layout.h
index 79edb041759ad1fe4286a5c7923786ec4c04c429..52fc5dfcb3d06709f963c62204b90b7d76e945c7 100644
--- chrome/browser/ui/views/frame/browser_view_layout.h
+++ chrome/browser/ui/views/frame/browser_view_layout.h
@@ -89,6 +89,8 @@ class BrowserViewLayout : public views::LayoutManager {
   }
   views::Widget* contents_border_widget() { return contents_border_widget_; }
 
+  void reset_toolbar() { toolbar_ = nullptr; }
+
   void SetUseBrowserContentMinimumSize(bool use_browser_content_minimum_size);
 
   // Sets the bounds for the contents border.
@@ -180,7 +182,7 @@ class BrowserViewLayout : public views::LayoutManager {
   const raw_ptr<WebAppFrameToolbarView> web_app_frame_toolbar_;
   const raw_ptr<views::Label> web_app_window_title_;
   const raw_ptr<TabStripRegionView> tab_strip_region_view_;
-  const raw_ptr<views::View> toolbar_;
+  raw_ptr<views::View> toolbar_;
   const raw_ptr<InfoBarContainerView> infobar_container_;
   const raw_ptr<views::View> contents_container_;
   const raw_ptr<MultiContentsView> multi_contents_view_;
diff --git chrome/browser/ui/views/frame/browser_view_layout_delegate.h chrome/browser/ui/views/frame/browser_view_layout_delegate.h
index aa1d3a78d628b6aceaaadd3cf8f83baf2faee1e6..f00e13784abc88a7fe32a22a698fc1196011767b 100644
--- chrome/browser/ui/views/frame/browser_view_layout_delegate.h
+++ chrome/browser/ui/views/frame/browser_view_layout_delegate.h
@@ -25,6 +25,7 @@ class BrowserViewLayoutDelegate {
   virtual gfx::Rect GetBoundsForTabStripRegionInBrowserView() const = 0;
   virtual gfx::Rect GetBoundsForWebAppFrameToolbarInBrowserView() const = 0;
   virtual int GetTopInsetInBrowserView() const = 0;
+  virtual void UpdateDialogTopInsetInBrowserView(int* dialog_top_y) const = 0;
   virtual bool IsToolbarVisible() const = 0;
   virtual bool IsBookmarkBarVisible() const = 0;
   virtual bool IsContentsSeparatorEnabled() const = 0;
diff --git chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc
index 11b9de59b0ff3657dc709931d72202615c977e0f..806d5585ba3b66b3c09679375449f97b4de599e1 100644
--- chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc
+++ chrome/browser/ui/views/frame/picture_in_picture_browser_frame_view.cc
@@ -612,6 +612,11 @@ PictureInPictureBrowserFrameView::PictureInPictureBrowserFrameView(
     auto_pip_setting_overlay_ =
         AddChildView(std::move(auto_pip_setting_overlay));
   }
+
+  if (!browser_view->browser()->SupportsWindowFeature(
+          Browser::FEATURE_TITLEBAR)) {
+    top_bar_container_view_->SetVisible(false);
+  }
 }
 
 PictureInPictureBrowserFrameView::~PictureInPictureBrowserFrameView() {
@@ -743,18 +748,42 @@ gfx::Rect PictureInPictureBrowserFrameView::GetWindowBoundsForClientBounds(
 
 int PictureInPictureBrowserFrameView::NonClientHitTest(
     const gfx::Point& point) {
-  // Allow interacting with the buttons.
-  if (GetLocationIconViewBounds().Contains(point) ||
-      GetBackToTabControlsBounds().Contains(point) ||
-      GetCloseControlsBounds().Contains(point)) {
-    return HTCLIENT;
+  const bool frameless = !top_bar_container_view_->GetVisible();
+  if (!frameless) {
+    // Allow interacting with the buttons.
+    if (GetLocationIconViewBounds().Contains(point) ||
+        GetBackToTabControlsBounds().Contains(point) ||
+        GetCloseControlsBounds().Contains(point)) {
+      return HTCLIENT;
+    }
+
+    for (size_t i = 0; i < content_setting_views_.size(); i++) {
+      if (GetContentSettingViewBounds(i).Contains(point)) {
+        return HTCLIENT;
+      }
+    }
   }
 
-  for (size_t i = 0; i < content_setting_views_.size(); i++) {
-    if (GetContentSettingViewBounds(i).Contains(point)) {
-      return HTCLIENT;
+#if BUILDFLAG(ENABLE_CEF)
+  if (frameless) {
+    // Match logic in BrowserView::ShouldDescendIntoChildForEventHandling.
+    const auto draggable_region =
+        browser_view()->browser()->cef_delegate()->GetDraggableRegion();
+    if (draggable_region.has_value()) {
+      // Draggable regions are defined relative to the web contents.
+      gfx::Point point_in_contents_web_view_coords(point);
+      views::View::ConvertPointToTarget(GetWidget()->GetRootView(),
+                                        browser_view()->contents_web_view(),
+                                        &point_in_contents_web_view_coords);
+
+      if (draggable_region->contains(
+              point_in_contents_web_view_coords.x(),
+              point_in_contents_web_view_coords.y())) {
+        return HTCAPTION;
+      }
     }
   }
+#endif  // BUILDFLAG(ENABLE_CEF)
 
   // Allow dragging and resizing the window.
   int window_component = GetHTComponentForFrame(
@@ -818,7 +847,8 @@ void PictureInPictureBrowserFrameView::Layout(PassKey) {
   gfx::Rect content_area = GetLocalBounds();
   content_area.Inset(FrameBorderInsets());
   gfx::Rect top_bar = content_area;
-  top_bar.set_height(kTopControlsHeight);
+  top_bar.set_height(
+      top_bar_container_view_->GetVisible() ? kTopControlsHeight : 0);
   top_bar_container_view_->SetBoundsRect(top_bar);
 #if !BUILDFLAG(IS_ANDROID)
   if (auto_pip_setting_overlay_) {
@@ -1389,7 +1419,8 @@ gfx::Insets PictureInPictureBrowserFrameView::FrameBorderInsets() const {
 }
 
 int PictureInPictureBrowserFrameView::GetTopAreaHeight() const {
-  return FrameBorderInsets().top() + kTopControlsHeight;
+  return FrameBorderInsets().top() +
+         (top_bar_container_view_->GetVisible() ? kTopControlsHeight : 0);
 }
 
 gfx::Size PictureInPictureBrowserFrameView::GetNonClientViewAreaSize() const {
diff --git chrome/browser/ui/views/omnibox/omnibox_popup_closer.cc chrome/browser/ui/views/omnibox/omnibox_popup_closer.cc
index 33c644486937523ddca9ae5efb09ed484802b84e..d74818698d81a762c91185e62e05935696ad2061 100644
--- chrome/browser/ui/views/omnibox/omnibox_popup_closer.cc
+++ chrome/browser/ui/views/omnibox/omnibox_popup_closer.cc
@@ -27,7 +27,8 @@ OmniboxPopupCloser::OmniboxPopupCloser(BrowserView* browser_view)
 OmniboxPopupCloser::~OmniboxPopupCloser() = default;
 
 void OmniboxPopupCloser::OnMouseEvent(ui::MouseEvent* event) {
-  if (!browser_view_->browser()->is_delete_scheduled() &&
+  if (browser_view_->browser() &&
+      !browser_view_->browser()->is_delete_scheduled() &&
       event->type() == ui::EventType::kMousePressed) {
     LocationBarView* location_bar_view = browser_view_->GetLocationBarView();
     CHECK(location_bar_view);
diff --git chrome/browser/ui/views/page_action/page_action_icon_controller.cc chrome/browser/ui/views/page_action/page_action_icon_controller.cc
index b73bc0fe7aabc4f42d1c534c5143ac02d618d259..8e0e37ecf29d419f3786f2106b24530511f1134a 100644
--- chrome/browser/ui/views/page_action/page_action_icon_controller.cc
+++ chrome/browser/ui/views/page_action/page_action_icon_controller.cc
@@ -109,6 +109,14 @@ void PageActionIconController::Init(const PageActionIconParams& params,
     if (IsPageActionMigrated(type)) {
       continue;
     }
+
+#if BUILDFLAG(ENABLE_CEF)
+    if (params.browser && params.browser->cef_delegate() &&
+        !params.browser->cef_delegate()->IsPageActionIconVisible(type)) {
+      continue;
+    }
+#endif
+
     switch (type) {
       case PageActionIconType::kPaymentsOfferNotification:
         add_page_action_icon(
diff --git chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
index 56773794bbeee119fe78fb5ed4d24999ef75c84b..83b3fbac8daff2b5a8fdb1f7fc6a736b35a4309e 100644
--- chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
+++ chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
@@ -754,29 +754,41 @@ gfx::Range BrowserTabStripController::ListTabsInGroup(
 }
 
 bool BrowserTabStripController::IsFrameCondensed() const {
+  if (!GetFrameView())
+    return false;
   return GetFrameView()->IsFrameCondensed();
 }
 
 bool BrowserTabStripController::HasVisibleBackgroundTabShapes() const {
+  if (!GetFrameView())
+    return false;
   return GetFrameView()->HasVisibleBackgroundTabShapes(
       BrowserFrameActiveState::kUseCurrent);
 }
 
 bool BrowserTabStripController::EverHasVisibleBackgroundTabShapes() const {
+  if (!GetFrameView())
+    return false;
   return GetFrameView()->EverHasVisibleBackgroundTabShapes();
 }
 
 bool BrowserTabStripController::CanDrawStrokes() const {
+  if (!GetFrameView())
+    return false;
   return GetFrameView()->CanDrawStrokes();
 }
 
 SkColor BrowserTabStripController::GetFrameColor(
     BrowserFrameActiveState active_state) const {
+  if (!GetFrameView())
+    return SK_ColorWHITE;
   return GetFrameView()->GetFrameColor(active_state);
 }
 
 std::optional<int> BrowserTabStripController::GetCustomBackgroundId(
     BrowserFrameActiveState active_state) const {
+  if (!GetFrameView())
+    return std::nullopt;
   return GetFrameView()->GetCustomBackgroundId(active_state);
 }
 
diff --git chrome/browser/ui/views/toolbar/toolbar_view.cc chrome/browser/ui/views/toolbar/toolbar_view.cc
index 31f6227c62e3c0b6c897bad9ec1b6278e94eda9c..94ad751746d3716c91941b124af487d7e6fb43d7 100644
--- chrome/browser/ui/views/toolbar/toolbar_view.cc
+++ chrome/browser/ui/views/toolbar/toolbar_view.cc
@@ -191,7 +191,7 @@ class TabstripLikeBackground : public views::Background {
   void Paint(gfx::Canvas* canvas, views::View* view) const override {
     bool painted = TopContainerBackground::PaintThemeCustomImage(canvas, view,
                                                                  browser_view_);
-    if (!painted) {
+    if (!painted && browser_view_->frame()->GetFrameView()) {
       SkColor frame_color =
           browser_view_->frame()->GetFrameView()->GetFrameColor(
               BrowserFrameActiveState::kUseCurrent);
@@ -225,12 +225,13 @@ END_METADATA
 DEFINE_CLASS_ELEMENT_IDENTIFIER_VALUE(ToolbarView, kToolbarElementId);
 DEFINE_CLASS_ELEMENT_IDENTIFIER_VALUE(ToolbarView, kToolbarContainerElementId);
 
-ToolbarView::ToolbarView(Browser* browser, BrowserView* browser_view)
+ToolbarView::ToolbarView(Browser* browser, BrowserView* browser_view,
+                         std::optional<DisplayMode> display_mode)
     : AnimationDelegateViews(this),
       browser_(browser),
       browser_view_(browser_view),
       app_menu_icon_controller_(browser->profile(), this),
-      display_mode_(GetDisplayMode(browser)) {
+      display_mode_(display_mode ? *display_mode : GetDisplayMode(browser)) {
   SetID(VIEW_ID_TOOLBAR);
   SetProperty(views::kElementIdentifierKey, kToolbarElementId);
 
@@ -265,9 +266,24 @@ ToolbarView::~ToolbarView() {
   if (browser_view_->GetSupportsTabStrip()) {
     browser()->GetTabStripModel()->RemoveObserver(this);
   }
+
+  browser_view_->WillDestroyToolbar();
 }
 
 void ToolbarView::Init() {
+#if BUILDFLAG(ENABLE_CEF)
+  using ToolbarButtonType = cef::BrowserDelegate::ToolbarButtonType;
+  auto button_visible = [this](ToolbarButtonType type) {
+    if (this->browser_->cef_delegate()) {
+      return this->browser_->cef_delegate()->IsToolbarButtonVisible(type);
+    }
+    return true;
+  };
+  #define BUTTON_VISIBLE(type) button_visible(ToolbarButtonType::type)
+#else
+  #define BUTTON_VISIBLE(type) true
+#endif
+
 #if defined(USE_AURA)
   // Avoid generating too many occlusion tracking calculation events before this
   // function returns. The occlusion status will be computed only once once this
@@ -290,7 +306,7 @@ void ToolbarView::Init() {
 
   auto location_bar = std::make_unique<LocationBarView>(
       browser_, browser_->profile(), browser_->command_controller(), this,
-      display_mode_ != DisplayMode::NORMAL);
+      display_mode_ != DisplayMode::NORMAL && !browser_->toolbar_overridden());
   // Make sure the toolbar shows by default.
   size_animation_.Reset(1);
 
@@ -363,7 +379,8 @@ void ToolbarView::Init() {
   }
   std::unique_ptr<media_router::CastToolbarButton> cast;
   if (!base::FeatureList::IsEnabled(features::kPinnedCastButton)) {
-    if (media_router::MediaRouterEnabled(browser_->profile())) {
+    if (media_router::MediaRouterEnabled(browser_->profile()) &&
+        BUTTON_VISIBLE(kCast)) {
       cast = media_router::CastToolbarButton::Create(browser_);
     }
   }
@@ -841,7 +858,8 @@ void ToolbarView::Layout(PassKey) {
 
   if (display_mode_ == DisplayMode::NORMAL) {
     LayoutCommon();
-    UpdateClipPath();
+    if (!browser_->toolbar_overridden())
+      UpdateClipPath();
   }
 
   if (toolbar_controller_) {
diff --git chrome/browser/ui/views/toolbar/toolbar_view.h chrome/browser/ui/views/toolbar/toolbar_view.h
index b1cb785df9749a5d417a0f833729b1ba2c78426b..5089feb419cba25ccce01b15b9a2d9713b90e4ed 100644
--- chrome/browser/ui/views/toolbar/toolbar_view.h
+++ chrome/browser/ui/views/toolbar/toolbar_view.h
@@ -99,7 +99,8 @@ class ToolbarView : public views::AccessiblePaneView,
   DECLARE_CLASS_ELEMENT_IDENTIFIER_VALUE(kToolbarElementId);
   DECLARE_CLASS_ELEMENT_IDENTIFIER_VALUE(kToolbarContainerElementId);
 
-  ToolbarView(Browser* browser, BrowserView* browser_view);
+  ToolbarView(Browser* browser, BrowserView* browser_view,
+              std::optional<DisplayMode> display_mode);
   ToolbarView(const ToolbarView&) = delete;
   ToolbarView& operator=(const ToolbarView&) = delete;
   ~ToolbarView() override;
