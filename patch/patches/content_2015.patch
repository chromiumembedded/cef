diff --git content/browser/devtools/devtools_http_handler.cc content/browser/devtools/devtools_http_handler.cc
index 3d24c6729ae683ed2447af4861c2f99b3e187ee8..e20f314c8e0c32f86b36b604c3b29ae60ef7b46d 100644
--- content/browser/devtools/devtools_http_handler.cc
+++ content/browser/devtools/devtools_http_handler.cc
@@ -590,7 +590,7 @@ void DevToolsHttpHandler::OnJsonRequest(
     base::Value::Dict version;
     version.Set("Protocol-Version", DevToolsAgentHost::GetProtocolVersion());
     version.Set("WebKit-Version", embedder_support::GetWebKitVersion());
-    version.Set("Browser", GetContentClient()->browser()->GetProduct());
+    version.Set("Browser", GetContentClient()->browser()->GetChromeProduct());
     version.Set("User-Agent", GetContentClient()->browser()->GetUserAgent());
     version.Set("V8-Version", V8_VERSION_STRING);
     std::string host = info.GetHeaderValue("host");
diff --git content/browser/loader/navigation_url_loader_impl.cc content/browser/loader/navigation_url_loader_impl.cc
index 5dc73a8d245c50a4528c81793c40a13ed514a2f5..d1cfb4fc29645447f761427b85db7d426f99f873 100644
--- content/browser/loader/navigation_url_loader_impl.cc
+++ content/browser/loader/navigation_url_loader_impl.cc
@@ -1307,7 +1307,7 @@ NavigationURLLoaderImpl::CreateNonNetworkLoaderFactory(
   mojo::PendingRemote<network::mojom::URLLoaderFactory>
       terminal_external_protocol;
   bool handled = GetContentClient()->browser()->HandleExternalProtocol(
-      resource_request.url, std::move(web_contents_getter),
+      resource_request.url, web_contents_getter,
       frame_tree_node->frame_tree_node_id(), navigation_ui_data,
       request_info.is_primary_main_frame,
       frame_tree_node->IsInFencedFrameTree(), request_info.sandbox_flags,
@@ -1319,6 +1319,21 @@ NavigationURLLoaderImpl::CreateNonNetworkLoaderFactory(
                 *request_info.initiator_document_token)
           : nullptr,
       request_info.isolation_info, &terminal_external_protocol);
+
+  if (!handled) {
+    handled = GetContentClient()->browser()->HandleExternalProtocol(
+        web_contents_getter, frame_tree_node->frame_tree_node_id(),
+        navigation_ui_data, request_info.is_primary_main_frame,
+        frame_tree_node->IsInFencedFrameTree(), request_info.sandbox_flags,
+        resource_request, initiating_origin,
+        request_info.initiator_document_token
+            ? RenderFrameHostImpl::FromDocumentToken(
+                  request_info.initiator_process_id,
+                  *request_info.initiator_document_token)
+            : nullptr,
+        request_info.isolation_info, &terminal_external_protocol);
+  }
+
   if (terminal_external_protocol) {
     return std::make_pair(
         /*is_cacheable=*/false,
diff --git content/public/browser/content_browser_client.cc content/public/browser/content_browser_client.cc
index 68bafbcd65301fd26f18e433057d69ae9d63a078..e69dbe192101f1bd5869e2e063bfe09aa4659c2d 100644
--- content/public/browser/content_browser_client.cc
+++ content/public/browser/content_browser_client.cc
@@ -1194,7 +1194,7 @@ ContentBrowserClient::CreateURLLoaderHandlerForServiceWorkerNavigationPreload(
 void ContentBrowserClient::OnNetworkServiceCreated(
     network::mojom::NetworkService* network_service) {}
 
-void ContentBrowserClient::ConfigureNetworkContextParams(
+bool ContentBrowserClient::ConfigureNetworkContextParams(
     BrowserContext* context,
     bool in_memory,
     const base::FilePath& relative_partition_path,
@@ -1203,6 +1203,7 @@ void ContentBrowserClient::ConfigureNetworkContextParams(
         cert_verifier_creation_params) {
   network_context_params->user_agent = GetUserAgentBasedOnPolicy(context);
   network_context_params->accept_language = "en-us,en";
+  return true;
 }
 
 std::vector<base::FilePath>
diff --git content/public/browser/content_browser_client.h content/public/browser/content_browser_client.h
index 7658c8045ad4687ffc2923061ee8310bf76c1190..1d92c4e65830bd330d8145749696affefa6337ad 100644
--- content/public/browser/content_browser_client.h
+++ content/public/browser/content_browser_client.h
@@ -1452,6 +1452,12 @@ class CONTENT_EXPORT ContentBrowserClient {
       bool opener_suppressed,
       bool* no_javascript_access);
 
+  // Called to report the result of new window creation after CanCreateWindow()
+  // returns true. There are cases where the new window may still be canceled.
+  virtual void CreateWindowResult(
+      RenderFrameHost* opener,
+      bool success) {}
+
   // Allows the embedder to return a delegate for the SpeechRecognitionManager.
   // The delegate will be owned by the manager. It's valid to return nullptr.
   virtual SpeechRecognitionManagerDelegate*
@@ -2275,7 +2281,7 @@ class CONTENT_EXPORT ContentBrowserClient {
   //
   // If |relative_partition_path| is the empty string, it means this needs to
   // create the default NetworkContext for the BrowserContext.
-  virtual void ConfigureNetworkContextParams(
+  virtual bool ConfigureNetworkContextParams(
       BrowserContext* context,
       bool in_memory,
       const base::FilePath& relative_partition_path,
@@ -2528,6 +2534,22 @@ class CONTENT_EXPORT ContentBrowserClient {
       const net::IsolationInfo& isolation_info,
       mojo::PendingRemote<network::mojom::URLLoaderFactory>* out_factory);
 
+  // Same as above, but exposing the whole ResourceRequest object.
+  virtual bool HandleExternalProtocol(
+      base::RepeatingCallback<WebContents*()> web_contents_getter,
+      FrameTreeNodeId frame_tree_node_id,
+      NavigationUIData* navigation_data,
+      bool is_primary_main_frame,
+      bool is_in_fenced_frame_tree,
+      network::mojom::WebSandboxFlags sandbox_flags,
+      const network::ResourceRequest& request,
+      const std::optional<url::Origin>& initiating_origin,
+      RenderFrameHost* initiator_document,
+      const net::IsolationInfo& isolation_info,
+      mojo::PendingRemote<network::mojom::URLLoaderFactory>* out_factory) {
+    return false;
+  }
+
   // Creates an OverlayWindow to be used for video or Picture-in-Picture.
   // This window will house the content shown when in Picture-in-Picture mode.
   // This will return a new OverlayWindow.
@@ -2598,6 +2620,10 @@ class CONTENT_EXPORT ContentBrowserClient {
   // Used as part of the user agent string.
   virtual std::string GetProduct();
 
+  // Returns the Chrome-specific product string. This is used for compatibility
+  // purposes with external tools like Selenium.
+  virtual std::string GetChromeProduct() { return GetProduct(); }
+
   // Returns the user agent. Content may cache this value.
   virtual std::string GetUserAgent();
 
diff --git content/public/renderer/content_renderer_client.h content/public/renderer/content_renderer_client.h
index d794a461eedde1003c72f47af0517249ab20806d..2c16efda39610105465f350b56c4a1bb7aa922da 100644
--- content/public/renderer/content_renderer_client.h
+++ content/public/renderer/content_renderer_client.h
@@ -113,6 +113,9 @@ class CONTENT_EXPORT ContentRendererClient {
   // a crash handler (such as crashpad) is already in use.
   virtual void SetUpWebAssemblyTrapHandler();
 
+  // Notifies that the RenderThread can now send sync IPC messages.
+  virtual void RenderThreadConnected() {}
+
   // Notifies that a new RenderFrame has been created.
   virtual void RenderFrameCreated(RenderFrame* render_frame) {}
 
@@ -369,6 +372,10 @@ class CONTENT_EXPORT ContentRendererClient {
   // This method may invalidate the frame.
   virtual void RunScriptsAtDocumentIdle(RenderFrame* render_frame) {}
 
+  // Notifies that a DevTools agent has attached or detached.
+  virtual void DevToolsAgentAttached() {}
+  virtual void DevToolsAgentDetached() {}
+
   // Allows subclasses to enable some runtime features before Blink has
   // started.
   virtual void SetRuntimeFeaturesDefaultsBeforeBlinkInitialization() {}
diff --git content/renderer/render_thread_impl.cc content/renderer/render_thread_impl.cc
index ccfd37cc73dff797166eb0e675d430d7abade835..0ec210882810ce7d4ab9b94d0d27fffc4c3acfdd 100644
--- content/renderer/render_thread_impl.cc
+++ content/renderer/render_thread_impl.cc
@@ -547,6 +547,8 @@ void RenderThreadImpl::Init() {
       GetContentClient()->renderer()->CreateURLLoaderThrottleProvider(
           blink::URLLoaderThrottleProviderType::kFrame);
 
+  GetContentClient()->renderer()->RenderThreadConnected();
+
   GetAssociatedInterfaceRegistry()->AddInterface<mojom::Renderer>(
       base::BindRepeating(&RenderThreadImpl::OnRendererInterfaceReceiver,
                           base::Unretained(this)));
diff --git content/renderer/renderer_blink_platform_impl.cc content/renderer/renderer_blink_platform_impl.cc
index 915bc8e9e05b875b7d86437b9992ca6753b516f5..4851aec9d7704d8f6b8b30d795ff72b3c68716b5 100644
--- content/renderer/renderer_blink_platform_impl.cc
+++ content/renderer/renderer_blink_platform_impl.cc
@@ -1072,6 +1072,15 @@ SkBitmap* RendererBlinkPlatformImpl::GetSadPageBitmap() {
 
 //------------------------------------------------------------------------------
 
+void RendererBlinkPlatformImpl::DevToolsAgentAttached() {
+  GetContentClient()->renderer()->DevToolsAgentAttached();
+}
+void RendererBlinkPlatformImpl::DevToolsAgentDetached() {
+  GetContentClient()->renderer()->DevToolsAgentDetached();
+}
+
+//------------------------------------------------------------------------------
+
 std::unique_ptr<blink::WebV8ValueConverter>
 RendererBlinkPlatformImpl::CreateWebV8ValueConverter() {
   return std::make_unique<V8ValueConverterImpl>();
diff --git content/renderer/renderer_blink_platform_impl.h content/renderer/renderer_blink_platform_impl.h
index e5ae92156ff264aed1ba7c6903083fe1dbba5781..7627c0418beb97fb6254c16de5343e8aebd8eb39 100644
--- content/renderer/renderer_blink_platform_impl.h
+++ content/renderer/renderer_blink_platform_impl.h
@@ -263,6 +263,9 @@ class CONTENT_EXPORT RendererBlinkPlatformImpl : public BlinkPlatformImpl {
   InertAndMinimumIntervalOfUserLevelMemoryPressureSignal() override;
 #endif  // BUILDFLAG(IS_ANDROID)
 
+  void DevToolsAgentAttached() override;
+  void DevToolsAgentDetached() override;
+
   // Tells this platform that the renderer is locked to a site (i.e., a scheme
   // plus eTLD+1, such as https://google.com), or to a more specific origin.
   void SetIsLockedToSite();
diff --git content/shell/browser/shell_content_browser_client.cc content/shell/browser/shell_content_browser_client.cc
index a172560e04921ffabad7cddd382330ffee7a29ba..ef058cd4be503f74b05c81daa98f27a2c106b710 100644
--- content/shell/browser/shell_content_browser_client.cc
+++ content/shell/browser/shell_content_browser_client.cc
@@ -770,7 +770,7 @@ void ShellContentBrowserClient::OnNetworkServiceCreated(
 #endif
 }
 
-void ShellContentBrowserClient::ConfigureNetworkContextParams(
+bool ShellContentBrowserClient::ConfigureNetworkContextParams(
     BrowserContext* context,
     bool in_memory,
     const base::FilePath& relative_partition_path,
@@ -779,6 +779,7 @@ void ShellContentBrowserClient::ConfigureNetworkContextParams(
         cert_verifier_creation_params) {
   ConfigureNetworkContextParamsForShell(context, network_context_params,
                                         cert_verifier_creation_params);
+  return true;
 }
 
 std::vector<base::FilePath>
diff --git content/shell/browser/shell_content_browser_client.h content/shell/browser/shell_content_browser_client.h
index 459836ee8ff5e82d7bdf9dd5f6d8cf0d358a63df..becefd9b61f7dc668131774d88133d657740a967 100644
--- content/shell/browser/shell_content_browser_client.h
+++ content/shell/browser/shell_content_browser_client.h
@@ -162,7 +162,7 @@ class ShellContentBrowserClient : public ContentBrowserClient {
   GetGeolocationSystemPermissionManager() override;
   void OnNetworkServiceCreated(
       network::mojom::NetworkService* network_service) override;
-  void ConfigureNetworkContextParams(
+  bool ConfigureNetworkContextParams(
       BrowserContext* context,
       bool in_memory,
       const base::FilePath& relative_partition_path,
diff --git headless/lib/browser/headless_content_browser_client.cc headless/lib/browser/headless_content_browser_client.cc
index 26f73ac1df7412b5c494d3ab8d2d116103553737..13214f607471f36254e7e8b0e2a3a2645faa6990 100644
--- headless/lib/browser/headless_content_browser_client.cc
+++ headless/lib/browser/headless_content_browser_client.cc
@@ -423,7 +423,7 @@ bool HeadlessContentBrowserClient::IsCookieDeprecationLabelAllowedForContext(
   return true;
 }
 
-void HeadlessContentBrowserClient::ConfigureNetworkContextParams(
+bool HeadlessContentBrowserClient::ConfigureNetworkContextParams(
     content::BrowserContext* context,
     bool in_memory,
     const base::FilePath& relative_partition_path,
@@ -433,6 +433,7 @@ void HeadlessContentBrowserClient::ConfigureNetworkContextParams(
   HeadlessBrowserContextImpl::From(context)->ConfigureNetworkContextParams(
       in_memory, relative_partition_path, network_context_params,
       cert_verifier_creation_params);
+  return true;
 }
 
 std::string HeadlessContentBrowserClient::GetProduct() {
diff --git headless/lib/browser/headless_content_browser_client.h headless/lib/browser/headless_content_browser_client.h
index 4234c1259f4b02e27fd1d11e68dbd3dd9de51fd8..8b4e308ce94afa4792a80cb0bd80243a46a23a03 100644
--- headless/lib/browser/headless_content_browser_client.h
+++ headless/lib/browser/headless_content_browser_client.h
@@ -114,7 +114,7 @@ class HeadlessContentBrowserClient : public content::ContentBrowserClient {
       content::BrowserContext* browser_context,
       const url::Origin& top_frame_origin,
       const url::Origin& context_origin) override;
-  void ConfigureNetworkContextParams(
+  bool ConfigureNetworkContextParams(
       content::BrowserContext* context,
       bool in_memory,
       const base::FilePath& relative_partition_path,
