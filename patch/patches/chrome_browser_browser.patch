diff --git chrome/browser/browser_about_handler.cc chrome/browser/browser_about_handler.cc
index 68ecda6a496fe9b3449eaa06493ec0f6de75eac1..fb8f5b7c85de3b46cf3499f42fd091faeb321749 100644
--- chrome/browser/browser_about_handler.cc
+++ chrome/browser/browser_about_handler.cc
@@ -24,6 +24,10 @@
 
 namespace {
 
+bool IsChromeIgnoreUrl(const std::string& spec) {
+  return base::EqualsCaseInsensitiveASCII(spec, "chrome://ignore/");
+}
+
 bool IsNonNavigationAboutUrl(const GURL& url) {
   if (!url.is_valid()) {
     return false;
@@ -31,8 +35,8 @@ bool IsNonNavigationAboutUrl(const GURL& url) {
 
   const std::string spec(url.spec());
   return base::EqualsCaseInsensitiveASCII(spec, chrome::kChromeUIRestartURL) ||
-         base::EqualsCaseInsensitiveASCII(spec, chrome::kChromeUIQuitURL);
-  ;
+         base::EqualsCaseInsensitiveASCII(spec, chrome::kChromeUIQuitURL) ||
+         IsChromeIgnoreUrl(spec);
 }
 
 }  // namespace
@@ -99,5 +103,8 @@ bool HandleNonNavigationAboutURL(const GURL& url,
         FROM_HERE, base::BindOnce(&chrome::AttemptExit));
     return true;
   }
+  if (IsChromeIgnoreUrl(spec)) {
+    return true;
+  }
   NOTREACHED();
 }
diff --git chrome/browser/devtools/devtools_window.cc chrome/browser/devtools/devtools_window.cc
index 9c99de825a28deb131a070d2c1a8ae18853de800..a1655856b61d77aa801fdf46df6ae56bcb0d93eb 100644
--- chrome/browser/devtools/devtools_window.cc
+++ chrome/browser/devtools/devtools_window.cc
@@ -39,6 +39,7 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/search_engines/template_url_service_factory.h"
 #include "chrome/browser/task_manager/web_contents_tags.h"
+#include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/prefs/prefs_tab_helper.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/browser/ui/tabs/tab_strip_user_gesture_details.h"
@@ -1257,6 +1258,13 @@ DevToolsWindow* DevToolsWindow::Create(
     if (!browser || !browser->is_type_normal()) {
       can_dock = false;
     }
+
+#if BUILDFLAG(ENABLE_CEF)
+    if (can_dock && browser && browser->cef_delegate()) {
+      // Don't dock DevTools for CEF-managed browsers.
+      can_dock = false;
+    }
+#endif
   }
 #endif
 
@@ -1719,7 +1727,9 @@ void DevToolsWindow::OpenInNewTab(const GURL& url) {
                                        /*navigation_handle_callback=*/{})) {
 #if BUILDFLAG(IS_ANDROID)
     NOTIMPLEMENTED();
-#else
+#elif !BUILDFLAG(ENABLE_CEF)
+    // Remove default behavior when CEF handles the open via OnOpenURLFromTab.
+    // See CEF issue #3735.
     chrome::ScopedTabbedBrowserDisplayer displayer(profile_);
     chrome::AddSelectedTabWithURL(displayer.browser(), fixed_url,
                                   ui::PAGE_TRANSITION_LINK);
@@ -1922,12 +1932,26 @@ void DevToolsWindow::CreateDevToolsBrowser() {
       Browser::CreationStatus::kOk) {
     return;
   }
-  browser_ =
-      Browser::Create(Browser::CreateParams::CreateForDevTools(profile_));
-  browser_->tab_strip_model()->AddWebContents(
-      OwnedMainWebContents::TakeWebContents(
-          std::move(owned_main_web_contents_)),
-      -1, ui::PAGE_TRANSITION_AUTO_TOPLEVEL, AddTabTypes::ADD_ACTIVE);
+  auto* inspected_web_contents = GetInspectedWebContents();
+  auto* opener = chrome::FindBrowserWithTab(inspected_web_contents);
+  auto devtools_contents = OwnedMainWebContents::TakeWebContents(
+      std::move(owned_main_web_contents_));
+
+#if BUILDFLAG(ENABLE_CEF)
+  // If a Browser is created, it will take ownership of |devtools_contents|.
+  browser_ = cef::BrowserDelegate::CreateDevToolsBrowser(
+      profile_, opener, inspected_web_contents, devtools_contents);
+#endif
+
+  if (!browser_) {
+    auto create_params = Browser::CreateParams::CreateForDevTools(profile_);
+    create_params.opener = opener;
+
+    browser_ = Browser::Create(std::move(create_params));
+    browser_->tab_strip_model()->AddWebContents(
+        std::move(devtools_contents),
+        -1, ui::PAGE_TRANSITION_AUTO_TOPLEVEL, AddTabTypes::ADD_ACTIVE);
+  }
 #endif
   OverrideAndSyncDevToolsRendererPrefs();
 }
diff --git chrome/browser/ui/BUILD.gn chrome/browser/ui/BUILD.gn
index f59c0ced5a9c4f6944d217b22fe42eda25d7cffe..c028b267d27a8dbd401fc29b05e192f220591ffd 100644
--- chrome/browser/ui/BUILD.gn
+++ chrome/browser/ui/BUILD.gn
@@ -7,6 +7,7 @@ import("//build/config/compiler/compiler.gni")
 import("//build/config/features.gni")
 import("//build/config/ozone.gni")
 import("//build/config/ui.gni")
+import("//cef/libcef/features/features.gni")
 import("//chrome/browser/buildflags.gni")
 import("//chrome/common/features.gni")
 import("//chromeos/ash/components/assistant/assistant.gni")
@@ -233,6 +234,10 @@ static_library("ui") {
     "//build/config/compiler:wexit_time_destructors",
   ]
 
+  if (enable_cef) {
+    configs += [ "//cef/libcef/features:config" ]
+  }
+
   public_deps = [
     # WARNING WARNING WARNING
     # New dependencies outside of //chrome/browser should be added to
@@ -260,6 +265,7 @@ static_library("ui") {
     "//build/config/chromebox_for_meetings:buildflags",
     "//build/config/linux/dbus:buildflags",
     "//cc/paint",
+    "//cef/libcef/features:buildflags",
     "//chrome:resources",
     "//chrome:strings",
     "//chrome/app:chrome_dll_resources",
@@ -679,6 +685,13 @@ static_library("ui") {
     deps += [ "//components/plus_addresses/resources:vector_icons" ]
   }
 
+  if (enable_cef) {
+    deps += [
+      "//cef:cef_resources",
+      "//cef/libcef/features:deps",
+    ]
+  }
+
   # TODO(crbug.com/41437292): Remove this circular dependency.
   # Any circular includes must depend on the target "//chrome/browser:browser_public_dependencies".
   # These are all-platform circular includes.
@@ -5102,6 +5115,7 @@ static_library("ui") {
   if (enable_printing) {
     deps += [
       "//components/printing/browser",
+      "//components/printing/common:mojo_interfaces",
       "//printing",
     ]
   }
diff --git chrome/browser/ui/browser.cc chrome/browser/ui/browser.cc
index 252d06cedda562f052816b70a4d32a6e93d5b4c4..3d842ff50fe6d5f9352dab40efdcb1c6d85fc641 100644
--- chrome/browser/ui/browser.cc
+++ chrome/browser/ui/browser.cc
@@ -303,6 +303,25 @@
 #include "chrome/browser/ui/overscroll_pref_manager.h"
 #endif  // defined(USE_AURA)
 
+#if BUILDFLAG(ENABLE_CEF)
+#define CALL_CEF_DELEGATE(name, ...)          \
+  if (cef_browser_delegate_) {                \
+    cef_browser_delegate_->name(__VA_ARGS__); \
+  }
+#define CALL_CEF_DELEGATE_RETURN(name, ...)          \
+  if (cef_browser_delegate_) {                       \
+    return cef_browser_delegate_->name(__VA_ARGS__); \
+  }
+#define CALL_CEF_DELEGATE_RESULT(name, result, ...)    \
+  if (cef_browser_delegate_) {                         \
+    result = cef_browser_delegate_->name(__VA_ARGS__); \
+  }
+#else  // !BUILDFLAG(ENABLE_CEF)
+#define CALL_CEF_DELEGATE(name, ...)
+#define CALL_CEF_DELEGATE_RETURN(name, ...)
+#define CALL_CEF_DELEGATE_RESULT(name, result, ...)
+#endif
+
 using base::UserMetricsAction;
 using content::NavigationController;
 using content::NavigationEntry;
@@ -596,6 +615,10 @@ Browser::Browser(const CreateParams& params)
       type_(params.type),
       profile_(params.profile),
       window_(nullptr),
+#if BUILDFLAG(ENABLE_CEF)
+      cef_browser_delegate_(
+          cef::BrowserDelegate::Create(this, params.cef_params, params.opener)),
+#endif
       tab_strip_model_delegate_(
           std::make_unique<chrome::BrowserTabStripModelDelegate>(this)),
       tab_strip_model_(std::make_unique<TabStripModel>(
@@ -663,8 +686,18 @@ Browser::Browser(const CreateParams& params)
   }
 #endif  // BUILDFLAG(IS_OZONE)
 
+  const bool views_hosted =
+#if BUILDFLAG(ENABLE_CEF)
+      cef_delegate() && cef_delegate()->IsViewsHosted();
+#else
+      false;
+#endif
+
   if (params.window) {
+    // TODO: Fix CEF issue #3924.
+    if (!views_hosted) {
     window_for_testing_.reset(params.window.get());
+    }
     window_ = params.window.get();
   } else {
     // TODO(crbug.com/413168662): This can be consolidated with above once
@@ -682,9 +715,12 @@ Browser::Browser(const CreateParams& params)
     session_service->WindowOpened(this);
   }
 
-  // Initialize the browser features that rely on the browser window now that it
-  // is initialized.
-  features_->InitPostWindowConstruction(this);
+  if (!views_hosted) {
+    // Initialize the browser features that rely on the browser window now that
+    // it is initialized. This will instead be called from
+    // BrowserView::AddedToWidget() for CEF Views-hosted windows.
+    features_->InitPostWindowConstruction(this);
+  }
 
   // All initialization is complete; after this point, the browser should be on
   // the browser list until it is marked for destruction.
@@ -766,6 +802,12 @@ Browser::~Browser() {
     // its cache and cookies once it gets destroyed at the appropriate time.
     ProfileDestroyer::DestroyOTRProfileWhenAppropriate(profile_);
   }
+
+  // Clean up any objects attached via UserData before implicit destruction
+  // of CreateParams. Destruction of those objects may call into something
+  // (ProfileImpl, PrefService, etc) that will be destroyed when the last
+  // CefRequestContextImpl reference (held by CreateParams) is released.
+  ClearAllUserData();
 }
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -1236,6 +1278,10 @@ BrowserWindowInterface::Type Browser::GetType() const {
   return type_;
 }
 
+bool Browser::IsNormalBrowser() const {
+  return BrowserWindowFeatures::IsNormalBrowser(this);
+}
+
 web_app::AppBrowserController* Browser::GetAppBrowserController() {
   return GetFeatures().app_browser_controller();
 }
@@ -1433,6 +1479,8 @@ void Browser::WindowFullscreenStateChanged() {
   GetCommandController()->FullscreenStateChanged();
   BookmarkBarController::From(this)->UpdateBookmarkBarState(
       BookmarkBarController::StateChangeReason::kToggleFullscreen);
+
+  CALL_CEF_DELEGATE(WindowFullscreenStateChanged);
 }
 
 void Browser::FullscreenTopUIStateChanged() {
@@ -1849,6 +1897,15 @@ content::KeyboardEventProcessingResult Browser::PreHandleKeyboardEvent(
     return content::KeyboardEventProcessingResult::HANDLED;
   }
 
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_) {
+    auto result = cef_browser_delegate_->PreHandleKeyboardEvent(source, event);
+    if (result != content::KeyboardEventProcessingResult::NOT_HANDLED) {
+      return result;
+    }
+  }
+#endif
+
   return window()->PreHandleKeyboardEvent(event);
 }
 
@@ -1856,8 +1913,18 @@ bool Browser::HandleKeyboardEvent(content::WebContents* source,
                                   const NativeWebKeyboardEvent& event) {
   DevToolsWindow* devtools_window =
       DevToolsWindow::GetInstanceForInspectedWebContents(source);
-  return (devtools_window && devtools_window->ForwardKeyboardEvent(event)) ||
-         window()->HandleKeyboardEvent(event);
+  if (devtools_window && devtools_window->ForwardKeyboardEvent(event)) {
+    return true;
+  }
+
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      cef_browser_delegate_->HandleKeyboardEvent(source, event)) {
+    return true;
+  }
+#endif
+
+  return window()->HandleKeyboardEvent(event);
 }
 
 bool Browser::TabsNeedBeforeUnloadFired() const {
@@ -1952,9 +2019,14 @@ bool Browser::IsBackForwardCacheSupported(content::WebContents& web_contents) {
 content::PreloadingEligibility Browser::IsPrerender2Supported(
     content::WebContents& web_contents,
     content::PreloadingTriggerType trigger_type) {
+#if BUILDFLAG(ENABLE_CEF)
+  // Prerender is not supported in CEF. See issue #3664.
+  return content::PreloadingEligibility::kPreloadingDisabled;
+#else
   Profile* profile =
       Profile::FromBrowserContext(web_contents.GetBrowserContext());
   return prefetch::IsSomePreloadingEnabled(*profile->GetPrefs());
+#endif
 }
 
 bool Browser::ShouldShowStaleContentOnEviction(content::WebContents* source) {
@@ -2019,6 +2091,14 @@ WebContents* Browser::OpenURLFromTab(
                                   std::move(navigation_handle_callback));
   }
 
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      !cef_browser_delegate_->OpenURLFromTabEx(source, params,
+                                               navigation_handle_callback)) {
+    return nullptr;
+  }
+#endif
+
   NavigateParams nav_params(this, params.url, params.transition);
   nav_params.FillNavigateParamsFromOpenURLParams(params);
   nav_params.source_contents = source;
@@ -2200,6 +2280,8 @@ void Browser::LoadingStateChanged(WebContents* source,
                                   bool should_show_loading_ui) {
   ScheduleUIUpdate(source, content::INVALIDATE_TYPE_LOAD);
   UpdateWindowForLoadingStateChanged(source, should_show_loading_ui);
+
+  CALL_CEF_DELEGATE(LoadingStateChanged, source, should_show_loading_ui);
 }
 
 void Browser::CloseContents(WebContents* source) {
@@ -2209,6 +2291,13 @@ void Browser::CloseContents(WebContents* source) {
 }
 
 void Browser::SetContentsBounds(WebContents* source, const gfx::Rect& bounds) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      cef_browser_delegate_->SetContentsBoundsEx(source, bounds)) {
+    return;
+  }
+#endif
+
   if (is_type_normal()) {
     return;
   }
@@ -2229,6 +2318,8 @@ void Browser::SetContentsBounds(WebContents* source, const gfx::Rect& bounds) {
 }
 
 void Browser::UpdateTargetURL(WebContents* source, const GURL& url) {
+  CALL_CEF_DELEGATE(UpdateTargetURL, source, url);
+
   std::vector<StatusBubble*> status_bubbles = GetStatusBubbles();
   for (StatusBubble* status_bubble : status_bubbles) {
     StatusBubbleViews* status_bubble_views =
@@ -2275,15 +2366,31 @@ void Browser::ContentsZoomChange(bool zoom_in) {
 }
 
 bool Browser::TakeFocus(content::WebContents* source, bool reverse) {
+  CALL_CEF_DELEGATE_RETURN(TakeFocus, source, reverse);
   return false;
 }
 
+void Browser::CanDownload(const GURL& url,
+                          const std::string& request_method,
+                          base::OnceCallback<void(bool)> callback) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_) {
+    cef_browser_delegate_->CanDownload(url, request_method,
+                                       std::move(callback));
+    return;
+  }
+#endif
+  std::move(callback).Run(true);
+}
+
 bool Browser::DidAddMessageToConsole(
     content::WebContents* source,
     blink::mojom::ConsoleMessageLevel log_level,
     const std::u16string& message,
     int32_t line_no,
     const std::u16string& source_id) {
+  CALL_CEF_DELEGATE_RETURN(DidAddMessageToConsole, source, log_level, message,
+                           line_no, source_id);
   static bool is_headless_mode = headless::IsHeadlessMode();
   if (is_headless_mode) {
     const bool is_builtin_component = !!source->GetWebUI();
@@ -2436,12 +2543,24 @@ void Browser::WebContentsCreated(WebContents* source_contents,
   // to track `new_contents` after it is added to its TabModel this override can
   // be removed.
   CreateSessionServiceTabHelper(new_contents);
+
+  CALL_CEF_DELEGATE(WebContentsCreated, source_contents,
+                    opener_render_process_id, opener_render_frame_id,
+                    frame_name, target_url, new_contents);
 }
 
 void Browser::RendererUnresponsive(
     WebContents* source,
     content::RenderWidgetHost* render_widget_host,
     base::RepeatingClosure hang_monitor_restarter) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      cef_browser_delegate_->RendererUnresponsiveEx(source, render_widget_host,
+                                                    hang_monitor_restarter)) {
+    return;
+  }
+#endif
+
   // Don't show the page hung dialog when a HTML popup hangs because
   // the dialog will take the focus and immediately close the popup.
   RenderWidgetHostView* view = render_widget_host->GetView();
@@ -2454,6 +2573,13 @@ void Browser::RendererUnresponsive(
 void Browser::RendererResponsive(
     WebContents* source,
     content::RenderWidgetHost* render_widget_host) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      cef_browser_delegate_->RendererResponsiveEx(source, render_widget_host)) {
+    return;
+  }
+#endif
+
   RenderWidgetHostView* view = render_widget_host->GetView();
   if (view && !render_widget_host->GetView()->IsHTMLFormPopup()) {
     TabDialogs::FromWebContents(source)->HideHungRendererDialog(
@@ -2463,6 +2589,15 @@ void Browser::RendererResponsive(
 
 content::JavaScriptDialogManager* Browser::GetJavaScriptDialogManager(
     WebContents* source) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_) {
+    auto* cef_js_dialog_manager =
+        cef_browser_delegate_->GetJavaScriptDialogManager(source);
+    if (cef_js_dialog_manager) {
+      return cef_js_dialog_manager;
+    }
+  }
+#endif
   return javascript_dialogs::TabModalDialogManager::FromWebContents(source);
 }
 
@@ -2499,6 +2634,11 @@ void Browser::DraggableRegionsChanged(
       app_browser_controller) {
     app_browser_controller->DraggableRegionsChanged(regions, contents);
   }
+#if BUILDFLAG(ENABLE_CEF)
+  else if (cef_delegate()) {
+    cef_delegate()->DraggableRegionsChanged(regions, contents);
+  }
+#endif
 }
 
 std::vector<blink::mojom::RelatedApplicationPtr>
@@ -2605,6 +2745,8 @@ void Browser::EnterFullscreenModeForTab(
       ->fullscreen_controller()
       ->EnterFullscreenModeForTab(requesting_frame,
                                   FullscreenTabParams{options.display_id});
+
+  CALL_CEF_DELEGATE(EnterFullscreenModeForTab, requesting_frame, options);
 }
 
 void Browser::ExitFullscreenModeForTab(WebContents* web_contents) {
@@ -2612,6 +2754,8 @@ void Browser::ExitFullscreenModeForTab(WebContents* web_contents) {
       ->exclusive_access_manager()
       ->fullscreen_controller()
       ->ExitFullscreenModeForTab(web_contents);
+
+  CALL_CEF_DELEGATE(ExitFullscreenModeForTab, web_contents);
 }
 
 bool Browser::IsFullscreenForTabOrPending(const WebContents* web_contents) {
@@ -2833,6 +2977,16 @@ void Browser::RequestMediaAccessPermission(
     content::WebContents* web_contents,
     const content::MediaStreamRequest& request,
     content::MediaResponseCallback callback) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_) {
+    callback = cef_browser_delegate_->RequestMediaAccessPermissionEx(
+        web_contents, request, std::move(callback));
+    if (callback.is_null()) {
+      return;
+    }
+  }
+#endif
+
   const extensions::Extension* extension =
       GetExtensionForOrigin(profile_, request.security_origin);
   MediaCaptureDevicesDispatcher::GetInstance()->ProcessMediaAccessRequest(
@@ -3398,9 +3552,11 @@ void Browser::OnFileSelectedFromDialog(const GURL& url) {
 // Browser, Getters for UI (private):
 
 std::vector<StatusBubble*> Browser::GetStatusBubbles() {
+  bool show_by_default = true;
+
   // For kiosk and exclusive app mode we want to always hide the status bubble.
   if (IsRunningInAppMode()) {
-    return {};
+    show_by_default = false;
   }
 
   // We hide the status bar for web apps windows as this matches native
@@ -3409,6 +3565,12 @@ std::vector<StatusBubble*> Browser::GetStatusBubbles() {
   auto* const app_browser_controller = GetAppBrowserController();
   if (app_browser_controller &&
       !app_browser_controller->HasMinimalUiButtons()) {
+    show_by_default = false;
+  }
+
+  bool show = show_by_default;
+  CALL_CEF_DELEGATE_RESULT(ShowStatusBubble, show, show_by_default);
+  if (!show) {
     return {};
   }
 
@@ -3562,6 +3724,8 @@ void Browser::SetAsDelegate(WebContents* web_contents, bool set_delegate) {
     BookmarkTabHelper::FromWebContents(web_contents)->RemoveObserver(this);
     web_contents_collection_.StopObserving(web_contents);
   }
+
+  CALL_CEF_DELEGATE(SetAsDelegate, web_contents, set_delegate);
 }
 
 void Browser::TabDetachedAtImpl(content::WebContents* contents,
@@ -3725,6 +3889,14 @@ bool Browser::PictureInPictureBrowserSupportsWindowFeature(
 
 bool Browser::SupportsWindowFeatureImpl(WindowFeature feature,
                                         bool check_can_support) const {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_delegate()) {
+    if (auto value = cef_delegate()->SupportsWindowFeature(feature)) {
+      return *value;
+    }
+  }
+#endif
+
   switch (type_) {
     case TYPE_NORMAL:
       return NormalBrowserSupportsWindowFeature(feature, check_can_support);
diff --git chrome/browser/ui/browser.h chrome/browser/ui/browser.h
index e75f1e00dc0525d7b9c364a020021ae6c797b5bb..40abde3273d8ec76fc4a11fea58ff9a83ce0728f 100644
--- chrome/browser/ui/browser.h
+++ chrome/browser/ui/browser.h
@@ -24,6 +24,7 @@
 #include "base/timer/elapsed_timer.h"
 #include "base/types/expected.h"
 #include "build/build_config.h"
+#include "cef/libcef/features/features.h"
 #include "chrome/browser/tab_contents/web_contents_collection.h"
 #include "chrome/browser/themes/theme_service_observer.h"
 #include "chrome/browser/ui/bookmarks/bookmark_bar.h"
@@ -54,6 +55,10 @@
 #include "ui/base/window_open_disposition.h"
 #include "ui/gfx/geometry/rect.h"
 
+#if BUILDFLAG(ENABLE_CEF)
+#include "cef/libcef/browser/chrome/browser_delegate.h"
+#endif
+
 #if BUILDFLAG(IS_ANDROID)
 #error This file should only be included on desktop.
 #endif
@@ -324,6 +329,15 @@ class Browser : public TabStripModelObserver,
     // Document Picture in Picture options, specific to TYPE_PICTURE_IN_PICTURE.
     std::optional<blink::mojom::PictureInPictureWindowOptions> pip_options;
 
+#if BUILDFLAG(ENABLE_CEF)
+    // Opaque CEF-specific configuration. Will be propagated to new Browsers.
+    scoped_refptr<cef::BrowserDelegate::CreateParams> cef_params;
+
+    // Specify the Browser that is opening this popup.
+    // Currently only used with TYPE_PICTURE_IN_PICTURE and TYPE_DEVTOOLS.
+    raw_ptr<Browser, DanglingUntriaged> opener = nullptr;
+#endif
+
    private:
     friend class Browser;
     friend class WindowSizerChromeOSTest;
@@ -416,6 +430,13 @@ class Browser : public TabStripModelObserver,
     update_ui_immediately_for_testing_ = true;
   }
 
+  // Return true if CEF will expose the toolbar to the client. This value is
+  // used to selectively enable toolbar behaviors such as command processing
+  // and omnibox focus without also including the toolbar in BrowserView layout
+  // calculations.
+  void set_toolbar_overridden(bool val) { toolbar_overridden_ = val; }
+  bool toolbar_overridden() const { return toolbar_overridden_; }
+
   // Accessors ////////////////////////////////////////////////////////////////
 
   const CreateParams& create_params() const { return create_params_; }
@@ -481,6 +502,12 @@ class Browser : public TabStripModelObserver,
     return features_.get();
   }
 
+#if BUILDFLAG(ENABLE_CEF)
+  cef::BrowserDelegate* cef_delegate() const {
+    return cef_browser_delegate_.get();
+  }
+#endif
+
   base::WeakPtr<Browser> AsWeakPtr();
   base::WeakPtr<const Browser> AsWeakPtr() const;
 
@@ -824,6 +851,7 @@ class Browser : public TabStripModelObserver,
   ImmersiveModeController* GetImmersiveModeController() override;
   BrowserActions* GetActions() override;
   Type GetType() const override;
+  bool IsNormalBrowser() const override;
   web_app::AppBrowserController* GetAppBrowserController() override;
   const web_app::AppBrowserController* GetAppBrowserController() const override;
   std::vector<tabs::TabInterface*> GetAllTabInterfaces() override;
@@ -931,6 +959,9 @@ class Browser : public TabStripModelObserver,
                           const ui::Event& event) override;
   void ContentsZoomChange(bool zoom_in) override;
   bool TakeFocus(content::WebContents* source, bool reverse) override;
+  void CanDownload(const GURL& url,
+                   const std::string& request_method,
+                   base::OnceCallback<void(bool)> callback) override;
   bool DidAddMessageToConsole(content::WebContents* source,
                               blink::mojom::ConsoleMessageLevel log_level,
                               const std::u16string& message,
@@ -1290,6 +1321,10 @@ class Browser : public TabStripModelObserver,
   // The active state of this browser.
   bool is_active_ = false;
 
+#if BUILDFLAG(ENABLE_CEF)
+  std::unique_ptr<cef::BrowserDelegate> cef_browser_delegate_;
+#endif
+
   std::unique_ptr<TabStripModelDelegate> const tab_strip_model_delegate_;
   std::unique_ptr<TabStripModel> const tab_strip_model_;
 
@@ -1354,6 +1389,8 @@ class Browser : public TabStripModelObserver,
   const std::string initial_workspace_;
   bool initial_visible_on_all_workspaces_state_;
 
+  bool toolbar_overridden_ = false;
+
   CreationSource creation_source_ = CreationSource::kUnknown;
 
   UnloadController unload_controller_;
diff --git chrome/browser/ui/browser_navigator.cc chrome/browser/ui/browser_navigator.cc
index 5843ab79fb1b4ae3f17be0711071122bf38030c3..a1979c606e683e4509b45f85b511d6c2bf3c6947 100644
--- chrome/browser/ui/browser_navigator.cc
+++ chrome/browser/ui/browser_navigator.cc
@@ -31,6 +31,7 @@
 #include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/browser_navigator_params.h"
 #include "chrome/browser/ui/browser_window.h"
+#include "chrome/browser/ui/browser_window/public/browser_window_features.h"
 #include "chrome/browser/ui/location_bar/location_bar.h"
 #include "chrome/browser/ui/singleton_tabs.h"
 #include "chrome/browser/ui/status_bubble.h"
@@ -256,6 +257,10 @@ std::tuple<Browser*, int> GetBrowserAndTabForDisposition(
 
       browser_params.pip_options = pip_options;
 
+#if BUILDFLAG(ENABLE_CEF)
+      browser_params.opener = params.browser;
+#endif
+
       const BrowserWindow* const browser_window = params.browser->window();
       const gfx::NativeWindow native_window =
           browser_window ? browser_window->GetNativeWindow()
@@ -544,7 +549,17 @@ std::unique_ptr<content::WebContents> CreateTargetContents(
   }
 #endif
 
-  return WebContents::Create(create_params);
+  std::unique_ptr<WebContents> target_contents =
+      WebContents::Create(create_params);
+
+#if BUILDFLAG(ENABLE_CEF)
+  auto cef_delegate = params.browser->cef_delegate();
+  if (cef_delegate) {
+    cef_delegate->OnWebContentsCreated(target_contents.get());
+  }
+#endif
+
+  return target_contents;
 }
 
 bool IsHostAllowedInIncognito(const GURL& url) {
@@ -909,6 +924,11 @@ base::WeakPtr<content::NavigationHandle> Navigate(NavigateParams* params) {
     // navigation happens in a different tab to the link click.
     apps::SetLinkCapturingSourceDisposition(tab_to_insert->GetContents(),
                                             params->disposition);
+
+    // With CEF the BrowserView is created before the TabModel, so we need a
+    // separate initialization of objects that depend on TabModel.
+    params->browser->GetFeatures().InitPostTabModelConstruction(
+        &params->browser->GetBrowserView());
   }
 
   if (params->source_contents == contents_to_navigate_or_insert) {
diff --git chrome/browser/ui/browser_tabstrip.cc chrome/browser/ui/browser_tabstrip.cc
index 52971bbc6f3ac75c0bfe4e225c1a1f054c705beb..085201f227e6aaccf0f01004e1499f25ca1fa01f 100644
--- chrome/browser/ui/browser_tabstrip.cc
+++ chrome/browser/ui/browser_tabstrip.cc
@@ -34,9 +34,13 @@ content::WebContents* AddAndReturnTabAt(
   // Time new tab page creation time.  We keep track of the timing data in
   // WebContents, but we want to include the time it takes to create the
   // WebContents object too.
+  // For CEF use a PageTransition that matches
+  // CefFrameHostImpl::kPageTransitionExplicit.
   base::TimeTicks new_tab_start_time = base::TimeTicks::Now();
-  NavigateParams params(browser, url.is_empty() ? browser->GetNewTabURL() : url,
-                        ui::PAGE_TRANSITION_TYPED);
+  NavigateParams params(
+      browser, url.is_empty() ? browser->GetNewTabURL() : url,
+      static_cast<ui::PageTransition>(ui::PAGE_TRANSITION_TYPED |
+                                      ui::PAGE_TRANSITION_FROM_ADDRESS_BAR));
   params.disposition = foreground ? WindowOpenDisposition::NEW_FOREGROUND_TAB
                                   : WindowOpenDisposition::NEW_BACKGROUND_TAB;
   params.tabstrip_index = idx;
@@ -92,6 +96,16 @@ content::WebContents* AddWebContents(
   // Can't create a new contents for the current tab - invalid case.
   DCHECK(disposition != WindowOpenDisposition::CURRENT_TAB);
 
+#if BUILDFLAG(ENABLE_CEF)
+  if (browser && browser->cef_delegate() && new_contents) {
+    new_contents =
+        browser->cef_delegate()->AddWebContents(std::move(new_contents));
+    if (!new_contents) {
+      return nullptr;
+    }
+  }
+#endif
+
   NavigateParams params(browser, std::move(new_contents));
   params.source_contents = source_contents;
   params.url = target_url;
@@ -115,8 +129,6 @@ void CloseWebContents(Browser* browser,
                       bool add_to_history) {
   int index = browser->tab_strip_model()->GetIndexOfWebContents(contents);
   if (index == TabStripModel::kNoTab) {
-    DUMP_WILL_BE_NOTREACHED()
-        << "CloseWebContents called for tab not in our strip";
     return;
   }
 
diff --git chrome/browser/ui/browser_window/internal/browser_window_features.cc chrome/browser/ui/browser_window/internal/browser_window_features.cc
index 541d40c4d7be15a20876bb79c1f553344a0f7f38..722ac4662d297b0c5ed9e335736e409d2160936e 100644
--- chrome/browser/ui/browser_window/internal/browser_window_features.cc
+++ chrome/browser/ui/browser_window/internal/browser_window_features.cc
@@ -156,6 +156,15 @@
 BrowserWindowFeatures::BrowserWindowFeatures() = default;
 BrowserWindowFeatures::~BrowserWindowFeatures() = default;
 
+// static
+bool BrowserWindowFeatures::IsNormalBrowser(const Browser* browser) {
+  // CEF normal browsers have TYPE_POPUP.
+  if (browser->is_type_popup() && browser->cef_delegate()) {
+    return true;
+  }
+  return browser->is_type_normal();
+}
+
 void BrowserWindowFeatures::Init(BrowserWindowInterface* browser) {
   // This is used only for the controllers which will be created on demand
   // later.
@@ -365,10 +374,12 @@ void BrowserWindowFeatures::InitPostWindowConstruction(Browser* browser) {
 
   Profile* const profile = browser_->GetProfile();
 
+  const bool supports_toolbar = IsNormalBrowser(browser);
+
   // Features that are only enabled for normal browser windows (e.g. a window
   // with an omnibox and a tab strip). By default most features should be
   // instantiated in this block.
-  if (browser->is_type_normal()) {
+  if (supports_toolbar) {
     BrowserView* browser_view = BrowserView::GetBrowserViewForBrowser(browser);
 
     if (IsChromeLabsEnabled()) {
@@ -433,7 +444,7 @@ void BrowserWindowFeatures::InitPostWindowConstruction(Browser* browser) {
       // Browser::GetBrowserView, which always returns a non-null BrowserView
       // in production, but this crashes during unittests using
       // BrowserWithTestWindowTest; these should eventually be refactored.
-      if (browser_view) {
+      if (browser_view && browser_view->GetTabSearchBubbleHost()) {
         tab_search_toolbar_button_controller_ =
             std::make_unique<TabSearchToolbarButtonController>(
                 browser_view, browser_view->GetTabSearchBubbleHost());
@@ -498,7 +509,7 @@ void BrowserWindowFeatures::InitPostWindowConstruction(Browser* browser) {
       browser, browser->GetTabStripModel(), profile, browser->GetWindow(),
       browser->GetType(), browser->app_name(), browser->GetSessionID());
 
-  if (browser->is_type_normal() || browser->is_type_app()) {
+  if (supports_toolbar || browser->is_type_app()) {
     toast_service_ = std::make_unique<ToastService>(browser);
   }
 
@@ -584,7 +595,9 @@ void BrowserWindowFeatures::InitPostBrowserViewConstruction(
   immersive_mode_controller_ =
       chrome::CreateImmersiveModeController(browser_view);
 
-  if (browser_view->GetIsNormalType()) {
+  const bool supports_toolbar = IsNormalBrowser(browser_view->browser());
+
+  if (supports_toolbar) {
 #if BUILDFLAG(ENABLE_GLIC)
     glic::GlicKeyedService* glic_service =
         glic::GlicKeyedService::Get(browser_view->GetProfile());
@@ -636,12 +649,6 @@ void BrowserWindowFeatures::InitPostBrowserViewConstruction(
           GetUserDataFactory().CreateInstance<ActorOverlayWindowController>(
               *browser_, browser_, std::move(container_overlay_view_pairs));
     }
-
-    data_protection_ui_controller_ =
-        GetUserDataFactory()
-            .CreateInstance<
-                enterprise_data_protection::DataProtectionUIController>(
-                *browser_view->browser(), browser_view);
   }
 
 #if !BUILDFLAG(IS_CHROMEOS)
@@ -667,6 +674,28 @@ void BrowserWindowFeatures::InitPostBrowserViewConstruction(
   user_education_->Init(browser_view);
 }
 
+void BrowserWindowFeatures::InitPostTabModelConstruction(
+    BrowserView* browser_view) {
+  const bool supports_toolbar = IsNormalBrowser(browser_view->browser());
+
+  if (supports_toolbar) {
+    if (!data_protection_ui_controller_) {
+        data_protection_ui_controller_ =
+            GetUserDataFactory()
+                .CreateInstance<
+                    enterprise_data_protection::DataProtectionUIController>(
+                    *browser_view->browser(), browser_view);
+    }
+  }
+}
+
+void BrowserWindowFeatures::TearDownPreToolbarViewDestruction() {
+  lens_overlay_entry_point_controller_.reset();
+  if (pinned_toolbar_actions_controller_) {
+    pinned_toolbar_actions_controller_->TearDown();
+  }
+}
+
 void BrowserWindowFeatures::TearDownPreBrowserWindowDestruction() {
   accelerator_provider_ = nullptr;
   extension_keybinding_registry_.reset();
@@ -674,7 +703,6 @@ void BrowserWindowFeatures::TearDownPreBrowserWindowDestruction() {
   live_tab_context_.reset();
   upgrade_notification_controller_.reset();
   memory_saver_opt_in_iph_controller_.reset();
-  lens_overlay_entry_point_controller_.reset();
   tab_search_toolbar_button_controller_.reset();
   profile_menu_coordinator_.reset();
   toast_service_.reset();
@@ -733,10 +761,6 @@ void BrowserWindowFeatures::TearDownPreBrowserWindowDestruction() {
   // Destroy fullscreen control host before exclusive access manager.
   fullscreen_control_host_.reset();
 
-  if (pinned_toolbar_actions_controller_) {
-    pinned_toolbar_actions_controller_->TearDown();
-  }
-
   // TODO(crbug.com/423956131): Update reset order once FindBarController is
   // deterministically constructed.
   find_bar_controller_.reset();
diff --git chrome/browser/ui/browser_window/public/browser_window_features.h chrome/browser/ui/browser_window/public/browser_window_features.h
index b191ac089fecc4115d806e0e25f654795262a2ef..91e6ff280251cfb1351b961bd2891fdbdfaaa3a3 100644
--- chrome/browser/ui/browser_window/public/browser_window_features.h
+++ chrome/browser/ui/browser_window/public/browser_window_features.h
@@ -186,6 +186,8 @@ class BrowserWindowFeatures {
   BrowserWindowFeatures();
   ~BrowserWindowFeatures();
 
+  static bool IsNormalBrowser(const Browser* browser);
+
   BrowserWindowFeatures(const BrowserWindowFeatures&) = delete;
   BrowserWindowFeatures& operator=(const BrowserWindowFeatures&) = delete;
 
@@ -202,6 +204,15 @@ class BrowserWindowFeatures {
   // hierarchy in BrowserView.
   void InitPostBrowserViewConstruction(BrowserView* browser_view);
 
+  // Initialize features that depend on the tab model object being created. May
+  // be called multiple times (on TabModel ceation via Navigate). With CEF this
+  // will be called after BrowserView construction.
+  void InitPostTabModelConstruction(BrowserView* browser_view);
+
+  // Called exactly once to tear down state that depends on the ToolbarView
+  // object.
+  void TearDownPreToolbarViewDestruction();
+
   // Called exactly once to tear down state that depends on the window object.
   void TearDownPreBrowserWindowDestruction();
 
diff --git chrome/browser/ui/browser_window/public/browser_window_interface.h chrome/browser/ui/browser_window/public/browser_window_interface.h
index e336256e846cfa7a61de9aee0a9bf60a552c26a1..a0b6f55e55452351da07a6e2ef26e23103608705 100644
--- chrome/browser/ui/browser_window/public/browser_window_interface.h
+++ chrome/browser/ui/browser_window/public/browser_window_interface.h
@@ -287,6 +287,10 @@ class BrowserWindowInterface : public content::PageNavigator {
   // browser window (e.g. most of the 3-dot menu actions).
   virtual BrowserActions* GetActions() = 0;
 
+  // Returns true if this is a normal browser as determined by
+  // BrowserWindowFeatures::IsNormalBrowser.
+  virtual bool IsNormalBrowser() const = 0;
+
   virtual web_app::AppBrowserController* GetAppBrowserController() = 0;
   virtual const web_app::AppBrowserController* GetAppBrowserController()
       const = 0;
diff --git chrome/browser/ui/views/frame/tab_strip_region_view.cc chrome/browser/ui/views/frame/tab_strip_region_view.cc
index 655f9653abf0090b8eaa3d8006913ce8c975948b..e214ba03092dd13ccf9115d86d04a9c10f8134fa 100644
--- chrome/browser/ui/views/frame/tab_strip_region_view.cc
+++ chrome/browser/ui/views/frame/tab_strip_region_view.cc
@@ -208,8 +208,7 @@ TabStripRegionView::TabStripRegionView(std::unique_ptr<TabStrip> tab_strip)
   std::unique_ptr<TabSearchContainer> tab_search_container;
   std::unique_ptr<TabStripActionContainer> tab_strip_action_container;
   std::unique_ptr<ProductSpecificationsButton> product_specifications_button;
-  if (browser &&
-      (browser->GetType() == BrowserWindowInterface::Type::TYPE_NORMAL)) {
+  if (browser && browser->IsNormalBrowser()) {
     if (features::HasTabSearchToolbarButton()) {
       tab_strip_action_container = std::make_unique<TabStripActionContainer>(
           tab_strip_->controller(),
