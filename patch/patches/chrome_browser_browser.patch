diff --git chrome/browser/browser_about_handler.cc chrome/browser/browser_about_handler.cc
index 68ecda6a496fe9b3449eaa06493ec0f6de75eac1..fb8f5b7c85de3b46cf3499f42fd091faeb321749 100644
--- chrome/browser/browser_about_handler.cc
+++ chrome/browser/browser_about_handler.cc
@@ -24,6 +24,10 @@
 
 namespace {
 
+bool IsChromeIgnoreUrl(const std::string& spec) {
+  return base::EqualsCaseInsensitiveASCII(spec, "chrome://ignore/");
+}
+
 bool IsNonNavigationAboutUrl(const GURL& url) {
   if (!url.is_valid()) {
     return false;
@@ -31,8 +35,8 @@ bool IsNonNavigationAboutUrl(const GURL& url) {
 
   const std::string spec(url.spec());
   return base::EqualsCaseInsensitiveASCII(spec, chrome::kChromeUIRestartURL) ||
-         base::EqualsCaseInsensitiveASCII(spec, chrome::kChromeUIQuitURL);
-  ;
+         base::EqualsCaseInsensitiveASCII(spec, chrome::kChromeUIQuitURL) ||
+         IsChromeIgnoreUrl(spec);
 }
 
 }  // namespace
@@ -99,5 +103,8 @@ bool HandleNonNavigationAboutURL(const GURL& url,
         FROM_HERE, base::BindOnce(&chrome::AttemptExit));
     return true;
   }
+  if (IsChromeIgnoreUrl(spec)) {
+    return true;
+  }
   NOTREACHED();
 }
diff --git chrome/browser/devtools/devtools_window.cc chrome/browser/devtools/devtools_window.cc
index b65d877234044eafd823542b593dcd7681149e3f..4465a1de87a77da0c7ccdedd412eab96b0bc1cb3 100644
--- chrome/browser/devtools/devtools_window.cc
+++ chrome/browser/devtools/devtools_window.cc
@@ -39,6 +39,7 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/search_engines/template_url_service_factory.h"
 #include "chrome/browser/task_manager/web_contents_tags.h"
+#include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/prefs/prefs_tab_helper.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/browser/ui/tabs/tab_strip_user_gesture_details.h"
@@ -1252,6 +1253,13 @@ DevToolsWindow* DevToolsWindow::Create(
     if (!browser || !browser->is_type_normal()) {
       can_dock = false;
     }
+
+#if BUILDFLAG(ENABLE_CEF)
+    if (can_dock && browser && browser->cef_delegate()) {
+      // Don't dock DevTools for CEF-managed browsers.
+      can_dock = false;
+    }
+#endif
   }
 #endif
 
@@ -1714,7 +1722,9 @@ void DevToolsWindow::OpenInNewTab(const GURL& url) {
                                        /*navigation_handle_callback=*/{})) {
 #if BUILDFLAG(IS_ANDROID)
     NOTIMPLEMENTED();
-#else
+#elif !BUILDFLAG(ENABLE_CEF)
+    // Remove default behavior when CEF handles the open via OnOpenURLFromTab.
+    // See CEF issue #3735.
     chrome::ScopedTabbedBrowserDisplayer displayer(profile_);
     chrome::AddSelectedTabWithURL(displayer.browser(), fixed_url,
                                   ui::PAGE_TRANSITION_LINK);
@@ -1917,12 +1927,26 @@ void DevToolsWindow::CreateDevToolsBrowser() {
       Browser::CreationStatus::kOk) {
     return;
   }
-  browser_ =
-      Browser::Create(Browser::CreateParams::CreateForDevTools(profile_));
-  browser_->tab_strip_model()->AddWebContents(
-      OwnedMainWebContents::TakeWebContents(
-          std::move(owned_main_web_contents_)),
-      -1, ui::PAGE_TRANSITION_AUTO_TOPLEVEL, AddTabTypes::ADD_ACTIVE);
+  auto* inspected_web_contents = GetInspectedWebContents();
+  auto* opener = chrome::FindBrowserWithTab(inspected_web_contents);
+  auto devtools_contents = OwnedMainWebContents::TakeWebContents(
+      std::move(owned_main_web_contents_));
+
+#if BUILDFLAG(ENABLE_CEF)
+  // If a Browser is created, it will take ownership of |devtools_contents|.
+  browser_ = cef::BrowserDelegate::CreateDevToolsBrowser(
+      profile_, opener, inspected_web_contents, devtools_contents);
+#endif
+
+  if (!browser_) {
+    auto create_params = Browser::CreateParams::CreateForDevTools(profile_);
+    create_params.opener = opener;
+
+    browser_ = Browser::Create(std::move(create_params));
+    browser_->tab_strip_model()->AddWebContents(
+        std::move(devtools_contents),
+        -1, ui::PAGE_TRANSITION_AUTO_TOPLEVEL, AddTabTypes::ADD_ACTIVE);
+  }
 #endif
   OverrideAndSyncDevToolsRendererPrefs();
 }
diff --git chrome/browser/ui/BUILD.gn chrome/browser/ui/BUILD.gn
index ead97b7634ab102af10618935b0192162de4fd68..e03fba55900a65ca83b6fa2a0743f160966a298a 100644
--- chrome/browser/ui/BUILD.gn
+++ chrome/browser/ui/BUILD.gn
@@ -7,6 +7,7 @@ import("//build/config/compiler/compiler.gni")
 import("//build/config/features.gni")
 import("//build/config/ozone.gni")
 import("//build/config/ui.gni")
+import("//cef/libcef/features/features.gni")
 import("//chrome/browser/buildflags.gni")
 import("//chrome/common/features.gni")
 import("//chromeos/ash/components/assistant/assistant.gni")
@@ -246,6 +247,10 @@ static_library("ui") {
     "//build/config/compiler:wexit_time_destructors",
   ]
 
+  if (enable_cef) {
+    configs += [ "//cef/libcef/features:config" ]
+  }
+
   public_deps = [
     # WARNING WARNING WARNING
     # New dependencies outside of //chrome/browser should be added to
@@ -273,6 +278,7 @@ static_library("ui") {
     "//build/config/chromebox_for_meetings:buildflags",
     "//build/config/linux/dbus:buildflags",
     "//cc/paint",
+    "//cef/libcef/features:buildflags",
     "//chrome:resources",
     "//chrome:strings",
     "//chrome/app:chrome_dll_resources",
@@ -687,6 +693,13 @@ static_library("ui") {
     deps += [ "//components/plus_addresses/resources:vector_icons" ]
   }
 
+  if (enable_cef) {
+    deps += [
+      "//cef:cef_resources",
+      "//cef/libcef/features:deps",
+    ]
+  }
+
   # TODO(crbug.com/41437292): Remove this circular dependency.
   # Any circular includes must depend on the target "//chrome/browser:browser_public_dependencies".
   # These are all-platform circular includes.
@@ -5290,6 +5303,7 @@ static_library("ui") {
   if (enable_printing) {
     deps += [
       "//components/printing/browser",
+      "//components/printing/common:mojo_interfaces",
       "//printing",
     ]
   }
diff --git chrome/browser/ui/browser.cc chrome/browser/ui/browser.cc
index e099f30e5fdad38660acba7c2b6edea745991c61..c71dd449db52d3110fe4c8a240975b17ef3482b9 100644
--- chrome/browser/ui/browser.cc
+++ chrome/browser/ui/browser.cc
@@ -303,6 +303,25 @@
 #include "chrome/browser/ui/overscroll_pref_manager.h"
 #endif  // defined(USE_AURA)
 
+#if BUILDFLAG(ENABLE_CEF)
+#define CALL_CEF_DELEGATE(name, ...)          \
+  if (cef_browser_delegate_) {                \
+    cef_browser_delegate_->name(__VA_ARGS__); \
+  }
+#define CALL_CEF_DELEGATE_RETURN(name, ...)          \
+  if (cef_browser_delegate_) {                       \
+    return cef_browser_delegate_->name(__VA_ARGS__); \
+  }
+#define CALL_CEF_DELEGATE_RESULT(name, result, ...)    \
+  if (cef_browser_delegate_) {                         \
+    result = cef_browser_delegate_->name(__VA_ARGS__); \
+  }
+#else  // !BUILDFLAG(ENABLE_CEF)
+#define CALL_CEF_DELEGATE(name, ...)
+#define CALL_CEF_DELEGATE_RETURN(name, ...)
+#define CALL_CEF_DELEGATE_RESULT(name, result, ...)
+#endif
+
 using base::UserMetricsAction;
 using content::NavigationController;
 using content::NavigationEntry;
@@ -607,6 +626,10 @@ Browser::Browser(const CreateParams& params)
       type_(params.type),
       profile_(params.profile),
       window_(nullptr),
+#if BUILDFLAG(ENABLE_CEF)
+      cef_browser_delegate_(
+          cef::BrowserDelegate::Create(this, params.cef_params, params.opener)),
+#endif
       tab_strip_model_delegate_(
           std::make_unique<chrome::BrowserTabStripModelDelegate>(this)),
       tab_strip_model_(std::make_unique<TabStripModel>(
@@ -684,9 +707,19 @@ Browser::Browser(const CreateParams& params)
     session_service->WindowOpened(this);
   }
 
-  // Initialize the browser features that rely on the browser window now that it
-  // is initialized.
-  features_->InitPostWindowConstruction(this);
+  const bool views_hosted =
+#if BUILDFLAG(ENABLE_CEF)
+      cef_delegate() && cef_delegate()->IsViewsHosted();
+#else
+      false;
+#endif
+
+  if (!views_hosted) {
+    // Initialize the browser features that rely on the browser window now that
+    // it is initialized. This will instead be called from
+    // BrowserView::AddedToWidget() for CEF Views-hosted windows.
+    features_->InitPostWindowConstruction(this);
+  }
 
   // All initialization is complete; after this point, the browser should be on
   // the browser list until it is marked for destruction.
@@ -773,6 +806,12 @@ Browser::~Browser() {
   if (select_file_dialog_.get()) {
     select_file_dialog_->ListenerDestroyed();
   }
+
+  // Clean up any objects attached via UserData before implicit destruction
+  // of CreateParams. Destruction of those objects may call into something
+  // (ProfileImpl, PrefService, etc) that will be destroyed when the last
+  // CefRequestContextImpl reference (held by CreateParams) is released.
+  ClearAllUserData();
 }
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -1225,6 +1264,10 @@ BrowserWindowInterface::Type Browser::GetType() const {
   return type_;
 }
 
+bool Browser::IsNormalBrowser() const {
+  return BrowserWindowFeatures::IsNormalBrowser(this);
+}
+
 web_app::AppBrowserController* Browser::GetAppBrowserController() {
   return app_controller_.get();
 }
@@ -1422,6 +1465,8 @@ void Browser::WindowFullscreenStateChanged() {
   GetCommandController()->FullscreenStateChanged();
   BookmarkBarController::From(this)->UpdateBookmarkBarState(
       BookmarkBarController::StateChangeReason::kToggleFullscreen);
+
+  CALL_CEF_DELEGATE(WindowFullscreenStateChanged);
 }
 
 void Browser::FullscreenTopUIStateChanged() {
@@ -1862,6 +1907,15 @@ content::KeyboardEventProcessingResult Browser::PreHandleKeyboardEvent(
     return content::KeyboardEventProcessingResult::HANDLED;
   }
 
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_) {
+    auto result = cef_browser_delegate_->PreHandleKeyboardEvent(source, event);
+    if (result != content::KeyboardEventProcessingResult::NOT_HANDLED) {
+      return result;
+    }
+  }
+#endif
+
   return window()->PreHandleKeyboardEvent(event);
 }
 
@@ -1869,8 +1923,18 @@ bool Browser::HandleKeyboardEvent(content::WebContents* source,
                                   const NativeWebKeyboardEvent& event) {
   DevToolsWindow* devtools_window =
       DevToolsWindow::GetInstanceForInspectedWebContents(source);
-  return (devtools_window && devtools_window->ForwardKeyboardEvent(event)) ||
-         window()->HandleKeyboardEvent(event);
+  if (devtools_window && devtools_window->ForwardKeyboardEvent(event)) {
+    return true;
+  }
+
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      cef_browser_delegate_->HandleKeyboardEvent(source, event)) {
+    return true;
+  }
+#endif
+
+  return window()->HandleKeyboardEvent(event);
 }
 
 bool Browser::TabsNeedBeforeUnloadFired() const {
@@ -1965,9 +2029,14 @@ bool Browser::IsBackForwardCacheSupported(content::WebContents& web_contents) {
 content::PreloadingEligibility Browser::IsPrerender2Supported(
     content::WebContents& web_contents,
     content::PreloadingTriggerType trigger_type) {
+#if BUILDFLAG(ENABLE_CEF)
+  // Prerender is not supported in CEF. See issue #3664.
+  return content::PreloadingEligibility::kPreloadingDisabled;
+#else
   Profile* profile =
       Profile::FromBrowserContext(web_contents.GetBrowserContext());
   return prefetch::IsSomePreloadingEnabled(*profile->GetPrefs());
+#endif
 }
 
 bool Browser::ShouldShowStaleContentOnEviction(content::WebContents* source) {
@@ -2032,6 +2101,14 @@ WebContents* Browser::OpenURLFromTab(
                                   std::move(navigation_handle_callback));
   }
 
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      !cef_browser_delegate_->OpenURLFromTabEx(source, params,
+                                               navigation_handle_callback)) {
+    return nullptr;
+  }
+#endif
+
   NavigateParams nav_params(this, params.url, params.transition);
   nav_params.FillNavigateParamsFromOpenURLParams(params);
   nav_params.source_contents = source;
@@ -2206,6 +2283,8 @@ void Browser::LoadingStateChanged(WebContents* source,
                                   bool should_show_loading_ui) {
   ScheduleUIUpdate(source, content::INVALIDATE_TYPE_LOAD);
   UpdateWindowForLoadingStateChanged(source, should_show_loading_ui);
+
+  CALL_CEF_DELEGATE(LoadingStateChanged, source, should_show_loading_ui);
 }
 
 void Browser::CloseContents(WebContents* source) {
@@ -2215,6 +2294,13 @@ void Browser::CloseContents(WebContents* source) {
 }
 
 void Browser::SetContentsBounds(WebContents* source, const gfx::Rect& bounds) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      cef_browser_delegate_->SetContentsBoundsEx(source, bounds)) {
+    return;
+  }
+#endif
+
   if (is_type_normal()) {
     return;
   }
@@ -2235,6 +2321,8 @@ void Browser::SetContentsBounds(WebContents* source, const gfx::Rect& bounds) {
 }
 
 void Browser::UpdateTargetURL(WebContents* source, const GURL& url) {
+  CALL_CEF_DELEGATE(UpdateTargetURL, source, url);
+
   std::vector<StatusBubble*> status_bubbles = GetStatusBubbles();
   for (StatusBubble* status_bubble : status_bubbles) {
     StatusBubbleViews* status_bubble_views =
@@ -2248,6 +2336,17 @@ void Browser::UpdateTargetURL(WebContents* source, const GURL& url) {
   }
 }
 
+bool Browser::DidAddMessageToConsole(
+    content::WebContents* source,
+    blink::mojom::ConsoleMessageLevel log_level,
+    const std::u16string& message,
+    int32_t line_no,
+    const std::u16string& source_id) {
+  CALL_CEF_DELEGATE_RETURN(DidAddMessageToConsole, source, log_level, message,
+                           line_no, source_id);
+  return false;
+}
+
 void Browser::ContentsMouseEvent(WebContents* source, const ui::Event& event) {
   const ui::EventType type = event.type();
   const bool exited = type == ui::EventType::kMouseExited;
@@ -2281,9 +2380,23 @@ void Browser::ContentsZoomChange(bool zoom_in) {
 }
 
 bool Browser::TakeFocus(content::WebContents* source, bool reverse) {
+  CALL_CEF_DELEGATE_RETURN(TakeFocus, source, reverse);
   return false;
 }
 
+void Browser::CanDownload(const GURL& url,
+                          const std::string& request_method,
+                          base::OnceCallback<void(bool)> callback) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_) {
+    cef_browser_delegate_->CanDownload(url, request_method,
+                                       std::move(callback));
+    return;
+  }
+#endif
+  std::move(callback).Run(true);
+}
+
 void Browser::BeforeUnloadFired(WebContents* web_contents,
                                 bool proceed,
                                 bool* proceed_to_fire_unload) {
@@ -2426,12 +2539,24 @@ void Browser::WebContentsCreated(WebContents* source_contents,
   // to track `new_contents` after it is added to its TabModel this override can
   // be removed.
   CreateSessionServiceTabHelper(new_contents);
+
+  CALL_CEF_DELEGATE(WebContentsCreated, source_contents,
+                    opener_render_process_id, opener_render_frame_id,
+                    frame_name, target_url, new_contents);
 }
 
 void Browser::RendererUnresponsive(
     WebContents* source,
     content::RenderWidgetHost* render_widget_host,
     base::RepeatingClosure hang_monitor_restarter) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      cef_browser_delegate_->RendererUnresponsiveEx(source, render_widget_host,
+                                                    hang_monitor_restarter)) {
+    return;
+  }
+#endif
+
   // Don't show the page hung dialog when a HTML popup hangs because
   // the dialog will take the focus and immediately close the popup.
   RenderWidgetHostView* view = render_widget_host->GetView();
@@ -2444,6 +2569,13 @@ void Browser::RendererUnresponsive(
 void Browser::RendererResponsive(
     WebContents* source,
     content::RenderWidgetHost* render_widget_host) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_ &&
+      cef_browser_delegate_->RendererResponsiveEx(source, render_widget_host)) {
+    return;
+  }
+#endif
+
   RenderWidgetHostView* view = render_widget_host->GetView();
   if (view && !render_widget_host->GetView()->IsHTMLFormPopup()) {
     TabDialogs::FromWebContents(source)->HideHungRendererDialog(
@@ -2453,6 +2585,15 @@ void Browser::RendererResponsive(
 
 content::JavaScriptDialogManager* Browser::GetJavaScriptDialogManager(
     WebContents* source) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_) {
+    auto* cef_js_dialog_manager =
+        cef_browser_delegate_->GetJavaScriptDialogManager(source);
+    if (cef_js_dialog_manager) {
+      return cef_js_dialog_manager;
+    }
+  }
+#endif
   return javascript_dialogs::TabModalDialogManager::FromWebContents(source);
 }
 
@@ -2488,6 +2629,11 @@ void Browser::DraggableRegionsChanged(
   if (app_controller_) {
     app_controller_->DraggableRegionsChanged(regions, contents);
   }
+#if BUILDFLAG(ENABLE_CEF)
+  else if (cef_delegate()) {
+    cef_delegate()->DraggableRegionsChanged(regions, contents);
+  }
+#endif
 }
 
 std::vector<blink::mojom::RelatedApplicationPtr>
@@ -2593,6 +2739,8 @@ void Browser::EnterFullscreenModeForTab(
       ->exclusive_access_manager()
       ->fullscreen_controller()
       ->EnterFullscreenModeForTab(requesting_frame, options.display_id);
+
+  CALL_CEF_DELEGATE(EnterFullscreenModeForTab, requesting_frame, options);
 }
 
 void Browser::ExitFullscreenModeForTab(WebContents* web_contents) {
@@ -2600,6 +2748,8 @@ void Browser::ExitFullscreenModeForTab(WebContents* web_contents) {
       ->exclusive_access_manager()
       ->fullscreen_controller()
       ->ExitFullscreenModeForTab(web_contents);
+
+  CALL_CEF_DELEGATE(ExitFullscreenModeForTab, web_contents);
 }
 
 bool Browser::IsFullscreenForTabOrPending(const WebContents* web_contents) {
@@ -2817,6 +2967,16 @@ void Browser::RequestMediaAccessPermission(
     content::WebContents* web_contents,
     const content::MediaStreamRequest& request,
     content::MediaResponseCallback callback) {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_browser_delegate_) {
+    callback = cef_browser_delegate_->RequestMediaAccessPermissionEx(
+        web_contents, request, std::move(callback));
+    if (callback.is_null()) {
+      return;
+    }
+  }
+#endif
+
   const extensions::Extension* extension =
       GetExtensionForOrigin(profile_, request.security_origin);
   MediaCaptureDevicesDispatcher::GetInstance()->ProcessMediaAccessRequest(
@@ -3401,9 +3561,11 @@ void Browser::RemoveScheduledUpdatesFor(WebContents* contents) {
 // Browser, Getters for UI (private):
 
 std::vector<StatusBubble*> Browser::GetStatusBubbles() {
+  bool show_by_default = true;
+
   // For kiosk and exclusive app mode we want to always hide the status bubble.
   if (IsRunningInAppMode()) {
-    return {};
+    show_by_default = false;
   }
 
   // We hide the status bar for web apps windows as this matches native
@@ -3411,6 +3573,12 @@ std::vector<StatusBubble*> Browser::GetStatusBubbles() {
   // mode, as the minimal browser UI includes the status bar.
   if (web_app::AppBrowserController::IsWebApp(this) &&
       !app_controller()->HasMinimalUiButtons()) {
+    show_by_default = false;
+  }
+
+  bool show = show_by_default;
+  CALL_CEF_DELEGATE_RESULT(ShowStatusBubble, show, show_by_default);
+  if (!show) {
     return {};
   }
 
@@ -3564,6 +3732,8 @@ void Browser::SetAsDelegate(WebContents* web_contents, bool set_delegate) {
     BookmarkTabHelper::FromWebContents(web_contents)->RemoveObserver(this);
     web_contents_collection_.StopObserving(web_contents);
   }
+
+  CALL_CEF_DELEGATE(SetAsDelegate, web_contents, set_delegate);
 }
 
 void Browser::TabDetachedAtImpl(content::WebContents* contents,
@@ -3725,6 +3895,14 @@ bool Browser::PictureInPictureBrowserSupportsWindowFeature(
 
 bool Browser::SupportsWindowFeatureImpl(WindowFeature feature,
                                         bool check_can_support) const {
+#if BUILDFLAG(ENABLE_CEF)
+  if (cef_delegate()) {
+    if (auto value = cef_delegate()->SupportsWindowFeature(feature)) {
+      return *value;
+    }
+  }
+#endif
+
   switch (type_) {
     case TYPE_NORMAL:
       return NormalBrowserSupportsWindowFeature(feature, check_can_support);
diff --git chrome/browser/ui/browser.h chrome/browser/ui/browser.h
index bf7925f401a45314d6ac9e71ff0113a792610ba7..bd3ca7dfa796d0cef58ab0282407d73676bd805c 100644
--- chrome/browser/ui/browser.h
+++ chrome/browser/ui/browser.h
@@ -24,6 +24,7 @@
 #include "base/timer/elapsed_timer.h"
 #include "base/types/expected.h"
 #include "build/build_config.h"
+#include "cef/libcef/features/features.h"
 #include "chrome/browser/tab_contents/web_contents_collection.h"
 #include "chrome/browser/themes/theme_service_observer.h"
 #include "chrome/browser/ui/bookmarks/bookmark_bar.h"
@@ -55,6 +56,10 @@
 #include "ui/gfx/geometry/rect.h"
 #include "ui/shell_dialogs/select_file_dialog.h"
 
+#if BUILDFLAG(ENABLE_CEF)
+#include "cef/libcef/browser/chrome/browser_delegate.h"
+#endif
+
 #if BUILDFLAG(IS_ANDROID)
 #error This file should only be included on desktop.
 #endif
@@ -329,6 +334,15 @@ class Browser : public TabStripModelObserver,
     // Document Picture in Picture options, specific to TYPE_PICTURE_IN_PICTURE.
     std::optional<blink::mojom::PictureInPictureWindowOptions> pip_options;
 
+#if BUILDFLAG(ENABLE_CEF)
+    // Opaque CEF-specific configuration. Will be propagated to new Browsers.
+    scoped_refptr<cef::BrowserDelegate::CreateParams> cef_params;
+
+    // Specify the Browser that is opening this popup.
+    // Currently only used with TYPE_PICTURE_IN_PICTURE and TYPE_DEVTOOLS.
+    raw_ptr<Browser, DanglingUntriaged> opener = nullptr;
+#endif
+
    private:
     friend class Browser;
     friend class WindowSizerChromeOSTest;
@@ -421,6 +435,13 @@ class Browser : public TabStripModelObserver,
     update_ui_immediately_for_testing_ = true;
   }
 
+  // Return true if CEF will expose the toolbar to the client. This value is
+  // used to selectively enable toolbar behaviors such as command processing
+  // and omnibox focus without also including the toolbar in BrowserView layout
+  // calculations.
+  void set_toolbar_overridden(bool val) { toolbar_overridden_ = val; }
+  bool toolbar_overridden() const { return toolbar_overridden_; }
+
   // Accessors ////////////////////////////////////////////////////////////////
 
   const CreateParams& create_params() const { return create_params_; }
@@ -486,6 +507,12 @@ class Browser : public TabStripModelObserver,
     return features_.get();
   }
 
+#if BUILDFLAG(ENABLE_CEF)
+  cef::BrowserDelegate* cef_delegate() const {
+    return cef_browser_delegate_.get();
+  }
+#endif
+
   base::WeakPtr<Browser> AsWeakPtr();
   base::WeakPtr<const Browser> AsWeakPtr() const;
 
@@ -826,6 +853,7 @@ class Browser : public TabStripModelObserver,
   ImmersiveModeController* GetImmersiveModeController() override;
   BrowserActions* GetActions() override;
   Type GetType() const override;
+  bool IsNormalBrowser() const override;
   web_app::AppBrowserController* GetAppBrowserController() override;
   const web_app::AppBrowserController* GetAppBrowserController() const override;
   std::vector<tabs::TabInterface*> GetAllTabInterfaces() override;
@@ -929,10 +957,18 @@ class Browser : public TabStripModelObserver,
   void SetContentsBounds(content::WebContents* source,
                          const gfx::Rect& bounds) override;
   void UpdateTargetURL(content::WebContents* source, const GURL& url) override;
+  bool DidAddMessageToConsole(content::WebContents* source,
+                              blink::mojom::ConsoleMessageLevel log_level,
+                              const std::u16string& message,
+                              int32_t line_no,
+                              const std::u16string& source_id) override;
   void ContentsMouseEvent(content::WebContents* source,
                           const ui::Event& event) override;
   void ContentsZoomChange(bool zoom_in) override;
   bool TakeFocus(content::WebContents* source, bool reverse) override;
+  void CanDownload(const GURL& url,
+                   const std::string& request_method,
+                   base::OnceCallback<void(bool)> callback) override;
   void BeforeUnloadFired(content::WebContents* source,
                          bool proceed,
                          bool* proceed_to_fire_unload) override;
@@ -1282,6 +1318,10 @@ class Browser : public TabStripModelObserver,
   // The active state of this browser.
   bool is_active_ = false;
 
+#if BUILDFLAG(ENABLE_CEF)
+  std::unique_ptr<cef::BrowserDelegate> cef_browser_delegate_;
+#endif
+
   std::unique_ptr<TabStripModelDelegate> const tab_strip_model_delegate_;
   std::unique_ptr<TabStripModel> const tab_strip_model_;
 
@@ -1346,6 +1386,8 @@ class Browser : public TabStripModelObserver,
   const std::string initial_workspace_;
   bool initial_visible_on_all_workspaces_state_;
 
+  bool toolbar_overridden_ = false;
+
   CreationSource creation_source_ = CreationSource::kUnknown;
 
   UnloadController unload_controller_;
diff --git chrome/browser/ui/browser_navigator.cc chrome/browser/ui/browser_navigator.cc
index 690a30d2c9a745ae4e2c75751f14475e1f419e43..16655a41a2a5fd0bce25e07d76b5f5c69dcd616d 100644
--- chrome/browser/ui/browser_navigator.cc
+++ chrome/browser/ui/browser_navigator.cc
@@ -256,6 +256,10 @@ std::tuple<Browser*, int> GetBrowserAndTabForDisposition(
 
       browser_params.pip_options = pip_options;
 
+#if BUILDFLAG(ENABLE_CEF)
+      browser_params.opener = params.browser;
+#endif
+
       const BrowserWindow* const browser_window = params.browser->window();
       const gfx::NativeWindow native_window =
           browser_window ? browser_window->GetNativeWindow()
@@ -544,7 +548,17 @@ std::unique_ptr<content::WebContents> CreateTargetContents(
   }
 #endif
 
-  return WebContents::Create(create_params);
+  std::unique_ptr<WebContents> target_contents =
+      WebContents::Create(create_params);
+
+#if BUILDFLAG(ENABLE_CEF)
+  auto cef_delegate = params.browser->cef_delegate();
+  if (cef_delegate) {
+    cef_delegate->OnWebContentsCreated(target_contents.get());
+  }
+#endif
+
+  return target_contents;
 }
 
 bool IsHostAllowedInIncognito(const GURL& url) {
diff --git chrome/browser/ui/browser_tabstrip.cc chrome/browser/ui/browser_tabstrip.cc
index 52971bbc6f3ac75c0bfe4e225c1a1f054c705beb..085201f227e6aaccf0f01004e1499f25ca1fa01f 100644
--- chrome/browser/ui/browser_tabstrip.cc
+++ chrome/browser/ui/browser_tabstrip.cc
@@ -34,9 +34,13 @@ content::WebContents* AddAndReturnTabAt(
   // Time new tab page creation time.  We keep track of the timing data in
   // WebContents, but we want to include the time it takes to create the
   // WebContents object too.
+  // For CEF use a PageTransition that matches
+  // CefFrameHostImpl::kPageTransitionExplicit.
   base::TimeTicks new_tab_start_time = base::TimeTicks::Now();
-  NavigateParams params(browser, url.is_empty() ? browser->GetNewTabURL() : url,
-                        ui::PAGE_TRANSITION_TYPED);
+  NavigateParams params(
+      browser, url.is_empty() ? browser->GetNewTabURL() : url,
+      static_cast<ui::PageTransition>(ui::PAGE_TRANSITION_TYPED |
+                                      ui::PAGE_TRANSITION_FROM_ADDRESS_BAR));
   params.disposition = foreground ? WindowOpenDisposition::NEW_FOREGROUND_TAB
                                   : WindowOpenDisposition::NEW_BACKGROUND_TAB;
   params.tabstrip_index = idx;
@@ -92,6 +96,16 @@ content::WebContents* AddWebContents(
   // Can't create a new contents for the current tab - invalid case.
   DCHECK(disposition != WindowOpenDisposition::CURRENT_TAB);
 
+#if BUILDFLAG(ENABLE_CEF)
+  if (browser && browser->cef_delegate() && new_contents) {
+    new_contents =
+        browser->cef_delegate()->AddWebContents(std::move(new_contents));
+    if (!new_contents) {
+      return nullptr;
+    }
+  }
+#endif
+
   NavigateParams params(browser, std::move(new_contents));
   params.source_contents = source_contents;
   params.url = target_url;
@@ -115,8 +129,6 @@ void CloseWebContents(Browser* browser,
                       bool add_to_history) {
   int index = browser->tab_strip_model()->GetIndexOfWebContents(contents);
   if (index == TabStripModel::kNoTab) {
-    DUMP_WILL_BE_NOTREACHED()
-        << "CloseWebContents called for tab not in our strip";
     return;
   }
 
diff --git chrome/browser/ui/browser_window/internal/browser_window_features.cc chrome/browser/ui/browser_window/internal/browser_window_features.cc
index 6dbbd5d5e5be13f2f3ed2ee04ffc34013624c502..0fea30666ee7f876c5afa8f5cb94e4e13ee0ca1e 100644
--- chrome/browser/ui/browser_window/internal/browser_window_features.cc
+++ chrome/browser/ui/browser_window/internal/browser_window_features.cc
@@ -137,6 +137,15 @@
 BrowserWindowFeatures::BrowserWindowFeatures() = default;
 BrowserWindowFeatures::~BrowserWindowFeatures() = default;
 
+// static
+bool BrowserWindowFeatures::IsNormalBrowser(const Browser* browser) {
+  // CEF normal browsers have TYPE_POPUP.
+  if (browser->is_type_popup() && browser->cef_delegate()) {
+    return true;
+  }
+  return browser->is_type_normal();
+}
+
 void BrowserWindowFeatures::Init(BrowserWindowInterface* browser) {
   // This is used only for the controllers which will be created on demand
   // later.
@@ -327,10 +336,12 @@ void BrowserWindowFeatures::InitPostWindowConstruction(Browser* browser) {
   }
 #endif
 
+  const bool supports_toolbar = IsNormalBrowser(browser);
+
   // Features that are only enabled for normal browser windows (e.g. a window
   // with an omnibox and a tab strip). By default most features should be
   // instantiated in this block.
-  if (browser->is_type_normal()) {
+  if (supports_toolbar) {
     BrowserView* browser_view = BrowserView::GetBrowserViewForBrowser(browser);
 
     if (IsChromeLabsEnabled()) {
@@ -390,7 +401,7 @@ void BrowserWindowFeatures::InitPostWindowConstruction(Browser* browser) {
       // Browser::GetBrowserView, which always returns a non-null BrowserView
       // in production, but this crashes during unittests using
       // BrowserWithTestWindowTest; these should eventually be refactored.
-      if (browser_view) {
+      if (browser_view && browser_view->GetTabSearchBubbleHost()) {
         tab_search_toolbar_button_controller_ =
             std::make_unique<TabSearchToolbarButtonController>(
                 browser_view, browser_view->GetTabSearchBubbleHost());
@@ -445,7 +456,7 @@ void BrowserWindowFeatures::InitPostWindowConstruction(Browser* browser) {
       browser->GetWindow(), browser->GetType(), browser->app_name(),
       browser->GetSessionID());
 
-  if (browser->is_type_normal() || browser->is_type_app()) {
+  if (supports_toolbar || browser->is_type_app()) {
     toast_service_ = std::make_unique<ToastService>(browser);
   }
 }
@@ -489,10 +500,12 @@ void BrowserWindowFeatures::InitPostBrowserViewConstruction(
   immersive_mode_controller_ =
       chrome::CreateImmersiveModeController(browser_view);
 
+  const bool supports_toolbar = IsNormalBrowser(browser_view->browser());
+
   // Memory Saver mode is default off but is available to turn on.
   // The controller relies on performance manager which isn't initialized in
   // some unit tests without browser view.
-  if (browser_view->GetIsNormalType()) {
+  if (supports_toolbar) {
 #if BUILDFLAG(ENABLE_GLIC)
     glic::GlicKeyedService* glic_service =
         glic::GlicKeyedService::Get(browser_view->GetProfile());
@@ -552,11 +565,17 @@ void BrowserWindowFeatures::InitPostBrowserViewConstruction(
   user_education_->Init(browser_view);
 }
 
+void BrowserWindowFeatures::TearDownPreToolbarViewDestruction() {
+  lens_overlay_entry_point_controller_.reset();
+  if (pinned_toolbar_actions_controller_) {
+    pinned_toolbar_actions_controller_->TearDown();
+  }
+}
+
 void BrowserWindowFeatures::TearDownPreBrowserWindowDestruction() {
   live_tab_context_.reset();
   upgrade_notification_controller_.reset();
   memory_saver_opt_in_iph_controller_.reset();
-  lens_overlay_entry_point_controller_.reset();
   tab_search_toolbar_button_controller_.reset();
   profile_menu_coordinator_.reset();
   toast_service_.reset();
@@ -605,10 +624,6 @@ void BrowserWindowFeatures::TearDownPreBrowserWindowDestruction() {
   desktop_browser_window_capabilities_.reset();
   signin_view_controller_->TearDownPreBrowserWindowDestruction();
 
-  if (pinned_toolbar_actions_controller_) {
-    pinned_toolbar_actions_controller_->TearDown();
-  }
-
   // TODO(crbug.com/423956131): Update reset order once FindBarController is
   // deterministically constructed.
   find_bar_controller_.reset();
diff --git chrome/browser/ui/browser_window/public/browser_window_features.h chrome/browser/ui/browser_window/public/browser_window_features.h
index d1d6ffe68c698442a374963b7e10ee91401c9a24..da55ac0c8a080de4921fa4145e2a4c68096d02b4 100644
--- chrome/browser/ui/browser_window/public/browser_window_features.h
+++ chrome/browser/ui/browser_window/public/browser_window_features.h
@@ -161,6 +161,8 @@ class BrowserWindowFeatures {
   BrowserWindowFeatures();
   ~BrowserWindowFeatures();
 
+  static bool IsNormalBrowser(const Browser* browser);
+
   BrowserWindowFeatures(const BrowserWindowFeatures&) = delete;
   BrowserWindowFeatures& operator=(const BrowserWindowFeatures&) = delete;
 
@@ -177,6 +179,10 @@ class BrowserWindowFeatures {
   // hierarchy in BrowserView.
   void InitPostBrowserViewConstruction(BrowserView* browser_view);
 
+  // Called exactly once to tear down state that depends on the ToolbarView
+  // object.
+  void TearDownPreToolbarViewDestruction();
+
   // Called exactly once to tear down state that depends on the window object.
   void TearDownPreBrowserWindowDestruction();
 
diff --git chrome/browser/ui/browser_window/public/browser_window_interface.h chrome/browser/ui/browser_window/public/browser_window_interface.h
index b021621eddc6bae32c937570565e3e1c365e777b..21a7c50123a97541a49333400bafeac15deb7b23 100644
--- chrome/browser/ui/browser_window/public/browser_window_interface.h
+++ chrome/browser/ui/browser_window/public/browser_window_interface.h
@@ -270,6 +270,10 @@ class BrowserWindowInterface : public content::PageNavigator {
   };
   virtual Type GetType() const = 0;
 
+  // Returns true if this is a normal browser as determined by
+  // BrowserWindowFeatures::IsNormalBrowser.
+  virtual bool IsNormalBrowser() const = 0;
+
   virtual web_app::AppBrowserController* GetAppBrowserController() = 0;
   virtual const web_app::AppBrowserController* GetAppBrowserController()
       const = 0;
diff --git chrome/browser/ui/views/frame/tab_strip_region_view.cc chrome/browser/ui/views/frame/tab_strip_region_view.cc
index 6ff349f49b0be376b086318afbbe10e214bc7fb9..8ef5e31f88b9adce8bc04ad1d718f056e6aa4009 100644
--- chrome/browser/ui/views/frame/tab_strip_region_view.cc
+++ chrome/browser/ui/views/frame/tab_strip_region_view.cc
@@ -126,8 +126,7 @@ TabStripRegionView::TabStripRegionView(std::unique_ptr<TabStrip> tab_strip)
   std::unique_ptr<TabSearchContainer> tab_search_container;
   std::unique_ptr<TabStripActionContainer> tab_strip_action_container;
   std::unique_ptr<ProductSpecificationsButton> product_specifications_button;
-  if (browser &&
-      (browser->GetType() == BrowserWindowInterface::Type::TYPE_NORMAL)) {
+  if (browser && browser->IsNormalBrowser()) {
     if (features::HasTabSearchToolbarButton()) {
       tab_strip_action_container = std::make_unique<TabStripActionContainer>(
           tab_strip_->controller(),
