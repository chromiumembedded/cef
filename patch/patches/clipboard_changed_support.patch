diff --git content/browser/renderer_host/clipboard_host_impl.cc content/browser/renderer_host/clipboard_host_impl.cc
index 8fad8bc6f2627..277fa60bef393 100644
--- content/browser/renderer_host/clipboard_host_impl.cc
+++ content/browser/renderer_host/clipboard_host_impl.cc
@@ -45,6 +45,7 @@
 #include "ui/base/data_transfer_policy/data_transfer_endpoint.h"
 #include "ui/base/data_transfer_policy/data_transfer_policy_controller.h"
 #include "url/gurl.h"
+#include "content/browser/web_contents/web_contents_impl.h"
 
 namespace content {
 
@@ -426,15 +427,39 @@ void ClipboardHostImpl::ReadCustomData(ui::ClipboardBuffer clipboard_buffer,
 
 void ClipboardHostImpl::WriteText(const std::u16string& text) {
   clipboard_writer_->WriteText(text);
+
+  RenderWidgetHostImpl* impl = reinterpret_cast<RenderWidgetHostImpl*>(
+      render_frame_host()->GetView()->GetRenderWidgetHost());
+  if (!impl)
+    return;
+
+  static_cast<WebContentsImpl*>(impl->delegate())
+      ->HandleClipboardChanged(text.c_str(), text.length());
 }
 
 void ClipboardHostImpl::WriteHtml(const std::u16string& markup,
                                   const GURL& url) {
   clipboard_writer_->WriteHTML(markup, url.spec());
+
+  RenderWidgetHostImpl* impl = reinterpret_cast<RenderWidgetHostImpl*>(
+      render_frame_host()->GetView()->GetRenderWidgetHost());
+  if (!impl)
+    return;
+
+  static_cast<WebContentsImpl*>(impl->delegate())
+      ->HandleClipboardChanged(markup.c_str(), markup.length());
 }
 
 void ClipboardHostImpl::WriteSvg(const std::u16string& markup) {
   clipboard_writer_->WriteSvg(markup);
+
+  RenderWidgetHostImpl* impl = reinterpret_cast<RenderWidgetHostImpl*>(
+      render_frame_host()->GetView()->GetRenderWidgetHost());
+  if (!impl)
+    return;
+
+  static_cast<WebContentsImpl*>(impl->delegate())
+      ->HandleClipboardChanged(markup.c_str(), markup.length());
 }
 
 void ClipboardHostImpl::WriteSmartPasteMarker() {
@@ -456,6 +481,17 @@ void ClipboardHostImpl::WriteBookmark(const std::string& url,
 
 void ClipboardHostImpl::WriteImage(const SkBitmap& bitmap) {
   clipboard_writer_->WriteImage(bitmap);
+
+  SkPixmap pixmap;
+  bitmap.readPixels(pixmap);
+
+  RenderWidgetHostImpl* impl = reinterpret_cast<RenderWidgetHostImpl*>(
+      render_frame_host()->GetView()->GetRenderWidgetHost());
+  if (!impl)
+    return;
+
+  static_cast<WebContentsImpl*>(impl->delegate())
+      ->HandleClipboardChanged(reinterpret_cast<const char*>(pixmap.addr()), pixmap.rowBytes());
 }
 
 void ClipboardHostImpl::CommitWrite() {
diff --git content/browser/renderer_host/render_widget_host_delegate.h content/browser/renderer_host/render_widget_host_delegate.h
index 059ff2b47e7aa..1d9da72f83ee4 100644
--- content/browser/renderer_host/render_widget_host_delegate.h
+++ content/browser/renderer_host/render_widget_host_delegate.h
@@ -87,6 +87,10 @@ class CONTENT_EXPORT RenderWidgetHostDelegate {
   virtual void ResizeDueToAutoResize(RenderWidgetHostImpl* render_widget_host,
                                      const gfx::Size& new_size) {}
 
+  // Is called when clipboard is changed
+  virtual void HandleClipboardChanged(const char16_t* data, size_t size) {}
+  virtual void HandleClipboardChanged(const char* data, size_t size) {}
+
   // Callback to give the browser a chance to handle the specified keyboard
   // event before sending it to the renderer. See enum for details on return
   // value.
diff --git content/browser/web_contents/web_contents_impl.cc content/browser/web_contents/web_contents_impl.cc
index 903612fec96d8..41f0999fff662 100644
--- content/browser/web_contents/web_contents_impl.cc
+++ content/browser/web_contents/web_contents_impl.cc
@@ -13,6 +13,8 @@
 #include <utility>
 #include <vector>
 
+#include <codecvt>
+#include <locale>
 #include "base/allocator/partition_alloc_features.h"
 #include "base/allocator/partition_allocator/starscan/pcscan.h"
 #include "base/bind.h"
@@ -3184,6 +3186,18 @@ void WebContentsImpl::RenderWidgetWasResized(
                              width_changed);
 }
 
+void WebContentsImpl::HandleClipboardChanged(const char16_t* data,
+                                             size_t size) {
+  std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t> convert;
+  auto converted = convert.to_bytes(data);
+
+  HandleClipboardChanged(converted.c_str(), converted.length());
+}
+
+void WebContentsImpl::HandleClipboardChanged(const char* data, size_t size) {
+  delegate_->HandleClipboardChanged(data, size);
+}
+
 KeyboardEventProcessingResult WebContentsImpl::PreHandleKeyboardEvent(
     const NativeWebKeyboardEvent& event) {
   OPTIONAL_TRACE_EVENT0(TRACE_DISABLED_BY_DEFAULT("content.verbose"),
diff --git content/browser/web_contents/web_contents_impl.h content/browser/web_contents/web_contents_impl.h
index 93bfd18b3e7fa..c1ed09ea825b1 100644
--- content/browser/web_contents/web_contents_impl.h
+++ content/browser/web_contents/web_contents_impl.h
@@ -911,6 +911,10 @@ class CONTENT_EXPORT WebContentsImpl : public WebContents,
 
   double GetPendingPageZoomLevel() override;
 
+ // Is called when clipboard is changed
+  void HandleClipboardChanged(const char16_t* data, size_t size) override;
+  void HandleClipboardChanged(const char* data, size_t size) override;
+
   KeyboardEventProcessingResult PreHandleKeyboardEvent(
       const NativeWebKeyboardEvent& event) override;
   bool HandleMouseEvent(const blink::WebMouseEvent& event) override;
diff --git content/public/browser/web_contents_delegate.cc content/public/browser/web_contents_delegate.cc
index 5b9c3ea1d0dc7..b1f7a58a5234d 100644
--- content/public/browser/web_contents_delegate.cc
+++ content/public/browser/web_contents_delegate.cc
@@ -91,6 +91,11 @@ bool WebContentsDelegate::HandleContextMenu(RenderFrameHost& render_frame_host,
   return false;
 }
 
+void WebContentsDelegate::HandleClipboardChanged(const char16_t* data,
+                                                 size_t size) {}
+
+void WebContentsDelegate::HandleClipboardChanged(const char* data,
+                                                 size_t size) {}
 KeyboardEventProcessingResult WebContentsDelegate::PreHandleKeyboardEvent(
     WebContents* source,
     const NativeWebKeyboardEvent& event) {
diff --git content/public/browser/web_contents_delegate.h content/public/browser/web_contents_delegate.h
index 1325bd4cde3a5..a7f756404bf75 100644
--- content/public/browser/web_contents_delegate.h
+++ content/public/browser/web_contents_delegate.h
@@ -275,6 +275,10 @@ class CONTENT_EXPORT WebContentsDelegate {
   virtual bool HandleContextMenu(RenderFrameHost& render_frame_host,
                                  const ContextMenuParams& params);
 
+  // Is called when clipboard is changed
+  virtual void HandleClipboardChanged(const char16_t* data, size_t size);
+  virtual void HandleClipboardChanged(const char* data, size_t size);
+
   // Allows delegates to handle keyboard events before sending to the renderer.
   // See enum for description of return values.
   virtual KeyboardEventProcessingResult PreHandleKeyboardEvent(
