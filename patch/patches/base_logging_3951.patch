diff --git base/logging.cc base/logging.cc
index b8eee13c990de7d26c3d754186965d5dd1f3ff61..396e876ce582bbfb9a83d17877cbb0acf820bdae 100644
--- base/logging.cc
+++ base/logging.cc
@@ -440,7 +440,30 @@ void WriteToFd(int fd, const char* data, size_t length) {
   }
 }
 
+#if BUILDFLAG(IS_WIN)
+using SetLogFatalCrashKeyFunc = void (*)(const char* /*file*/,
+                                         int /*line*/,
+                                         const char* /*message*/);
+
+SetLogFatalCrashKeyFunc SetLogFatalCrashKeyFuncGetter() {
+  static SetLogFatalCrashKeyFunc log_fatal_crash_key_func = []() {
+    // Function exported by bootstrap.exe.
+    return reinterpret_cast<SetLogFatalCrashKeyFunc>(
+        GetProcAddress(GetModuleHandle(NULL), "SetLogFatalCrashKey"));
+  }();
+  return log_fatal_crash_key_func;
+}
+#endif  // BUILDFLAG(IS_WIN)
+
 void SetLogFatalCrashKey(LogMessage* log_message) {
+#if BUILDFLAG(IS_WIN)
+  if (auto func = SetLogFatalCrashKeyFuncGetter()) {
+    func(log_message->file(), log_message->line(),
+         log_message->str().c_str() + log_message->message_start());
+    return;
+  }
+#endif
+
 #if !BUILDFLAG(IS_NACL)
   // In case of an out-of-memory condition, this code could be reentered when
   // constructing and storing the key. Using a static is not thread-safe, but if
@@ -519,6 +542,11 @@ bool BaseInitLoggingImpl(const LoggingSettings& settings) {
   g_log_format = settings.log_format;
 #endif
 
+#if BUILDFLAG(IS_WIN)
+  // Preload the function pointer so that we do minimal work while crashing.
+  SetLogFatalCrashKeyFuncGetter();
+#endif
+
   MaybeInitializeVlogInfo();
 
   g_logging_destination = settings.logging_dest;
diff --git base/logging.h base/logging.h
index 262a86ef023b2871b2ec94e4d42fb93480a17cc1..2a638248f5da3fb23d9c8cf5596562671edb15b8 100644
--- base/logging.h
+++ base/logging.h
@@ -613,6 +613,7 @@ class BASE_EXPORT LogMessage {
   std::string str() const { return stream_.str(); }
   const char* file() const { return file_; }
   int line() const { return line_; }
+  size_t message_start() const { return message_start_; }
 
   // Gets file:line: message in a format suitable for crash reporting.
   std::string BuildCrashString() const;
